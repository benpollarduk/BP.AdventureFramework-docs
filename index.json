{
  "api/BP.AdventureFramework.Assets.Attributes.Attribute.html": {
    "href": "api/BP.AdventureFramework.Assets.Attributes.Attribute.html",
    "title": "Class Attribute | BP.AdventureFramework",
    "keywords": "Class Attribute Provides a description of an attribute. Inheritance object Attribute Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Assets.Attributes Assembly: BP.AdventureFramework.dll Syntax public class Attribute Constructors | Edit this page View Source Attribute(string, string, int, int) Initailizes a new instance of the Attribute class. Declaration public Attribute(string name, string description, int minimum, int maximum) Parameters Type Name Description string name Specify the name of the attibute. string description Specify the description of the attibute. int minimum Specify the minimum limit of the attibute. int maximum Specify the maximum limit of the attibute. Properties | Edit this page View Source Description Get the description of the attribute. Declaration public string Description { get; } Property Value Type Description string | Edit this page View Source Maximum Get the maximum limit of the attribute. Declaration public int Maximum { get; } Property Value Type Description int | Edit this page View Source Minimum Get the minimum limit of the attribute. Declaration public int Minimum { get; } Property Value Type Description int | Edit this page View Source Name Get the name of the attribute. Declaration public string Name { get; } Property Value Type Description string"
  },
  "api/BP.AdventureFramework.Assets.Attributes.AttributeManager.html": {
    "href": "api/BP.AdventureFramework.Assets.Attributes.AttributeManager.html",
    "title": "Class AttributeManager | BP.AdventureFramework",
    "keywords": "Class AttributeManager Provides a class for managing attributes. Inheritance object AttributeManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Assets.Attributes Assembly: BP.AdventureFramework.dll Syntax public sealed class AttributeManager Properties | Edit this page View Source Count Get the number of attributes this manager has. Declaration public int Count { get; } Property Value Type Description int Methods | Edit this page View Source Add(Attribute, int) Add a value to an attribute. Declaration public void Add(Attribute attribute, int value) Parameters Type Name Description Attribute attribute The attribute. int value The value. | Edit this page View Source Add(string, int) Add a value to an attribute. Declaration public void Add(string attributeName, int value) Parameters Type Name Description string attributeName The name of the attribute. int value The value. | Edit this page View Source GetAsDictionary() Get all attributes as a dictionary. Declaration public Dictionary<Attribute, int> GetAsDictionary() Returns Type Description Dictionary<Attribute, int> An array of attribtes. | Edit this page View Source GetAttributes() Get all attributes. Declaration public Attribute[] GetAttributes() Returns Type Description Attribute[] An array of attribtes. | Edit this page View Source GetValue(Attribute) Get the value of an attribute. Declaration public int GetValue(Attribute attribute) Parameters Type Name Description Attribute attribute The attribute. Returns Type Description int The value. | Edit this page View Source GetValue(string) Get the value of an attribute. Declaration public int GetValue(string attributeName) Parameters Type Name Description string attributeName The name of the attribute. Returns Type Description int The value. | Edit this page View Source Remove(Attribute) Remove an attribute. Declaration public void Remove(Attribute attribute) Parameters Type Name Description Attribute attribute The attribute. | Edit this page View Source Remove(string) Remove an attribute. Declaration public void Remove(string attributeName) Parameters Type Name Description string attributeName The name of the attribute. | Edit this page View Source RemoveAll() Remove all attributes. Declaration public void RemoveAll() | Edit this page View Source Subtract(Attribute, int) Subtract a value from an attribute. Declaration public void Subtract(Attribute attribute, int value) Parameters Type Name Description Attribute attribute The attribute. int value The value. | Edit this page View Source Subtract(string, int) Subtract a value from an attribute. Declaration public void Subtract(string attributeName, int value) Parameters Type Name Description string attributeName The name of the attribute. int value The value."
  },
  "api/BP.AdventureFramework.Assets.Attributes.html": {
    "href": "api/BP.AdventureFramework.Assets.Attributes.html",
    "title": "Namespace BP.AdventureFramework.Assets.Attributes | BP.AdventureFramework",
    "keywords": "Namespace BP.AdventureFramework.Assets.Attributes Classes Attribute Provides a description of an attribute. AttributeManager Provides a class for managing attributes."
  },
  "api/BP.AdventureFramework.Assets.Characters.Character.html": {
    "href": "api/BP.AdventureFramework.Assets.Characters.Character.html",
    "title": "Class Character | BP.AdventureFramework",
    "keywords": "Class Character Represents a generic in game character. Inheritance object ExaminableObject Character NonPlayableCharacter PlayableCharacter Implements IExaminable IPlayerVisible IInteractWithItem Inherited Members ExaminableObject.Examination ExaminableObject.ToString() ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.Examine() ExaminableObject.IsPlayerVisible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: BP.AdventureFramework.Assets.Characters Assembly: BP.AdventureFramework.dll Syntax public abstract class Character : ExaminableObject, IExaminable, IPlayerVisible, IInteractWithItem Properties | Edit this page View Source Interaction Get or set the interaction. Declaration public InteractionCallback Interaction { get; set; } Property Value Type Description InteractionCallback | Edit this page View Source IsAlive Get if this character is alive. Declaration public bool IsAlive { get; protected set; } Property Value Type Description bool | Edit this page View Source Items Get the items this Character holds. Declaration public Item[] Items { get; protected set; } Property Value Type Description Item[] Methods | Edit this page View Source AcquireItem(Item) Acquire an item. Declaration public virtual void AcquireItem(Item item) Parameters Type Name Description Item item The item to acquire. | Edit this page View Source DequireItem(Item) De-acquire an item. Declaration public virtual void DequireItem(Item item) Parameters Type Name Description Item item The item to de-acquire. | Edit this page View Source FindItem(string, out Item, bool) Find an item. Declaration public virtual bool FindItem(string itemName, out Item item, bool includeInvisibleItems = false) Parameters Type Name Description string itemName The items name. Item item The item. bool includeInvisibleItems Specify if invisible items should be included. Returns Type Description bool True if the item was found. | Edit this page View Source Give(Item, Character) Give an item to another in game Character. Declaration public virtual bool Give(Item item, Character character) Parameters Type Name Description Item item The item to give. Character character The Character to give the item to. Returns Type Description bool True if the transaction completed OK, else false. | Edit this page View Source HasItem(Item, bool) Determine if this PlayableCharacter has an item. Declaration public virtual bool HasItem(Item item, bool includeInvisibleItems = false) Parameters Type Name Description Item item The item. bool includeInvisibleItems Specify if invisible items should be included. Returns Type Description bool True if the item is found, else false. | Edit this page View Source Interact(Item) Interact with an item. Declaration public InteractionResult Interact(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description InteractionResult The result of the interaction. | Edit this page View Source InteractWithItem(Item) Interact with a specified item. Declaration protected virtual InteractionResult InteractWithItem(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description InteractionResult The result of the interaction. | Edit this page View Source Kill() Kill the character. Declaration public virtual void Kill() Implements IExaminable IPlayerVisible IInteractWithItem"
  },
  "api/BP.AdventureFramework.Assets.Characters.IConverser.html": {
    "href": "api/BP.AdventureFramework.Assets.Characters.IConverser.html",
    "title": "Interface IConverser | BP.AdventureFramework",
    "keywords": "Interface IConverser Represents an object that can converse. Inherited Members IExaminable.Identifier IExaminable.Description IExaminable.Commands IExaminable.Attributes IExaminable.Examine() IPlayerVisible.IsPlayerVisible Namespace: BP.AdventureFramework.Assets.Characters Assembly: BP.AdventureFramework.dll Syntax public interface IConverser : IExaminable, IPlayerVisible Properties | Edit this page View Source Conversation Get or set the conversation. Declaration Conversation Conversation { get; set; } Property Value Type Description Conversation"
  },
  "api/BP.AdventureFramework.Assets.Characters.NonPlayableCharacter.html": {
    "href": "api/BP.AdventureFramework.Assets.Characters.NonPlayableCharacter.html",
    "title": "Class NonPlayableCharacter | BP.AdventureFramework",
    "keywords": "Class NonPlayableCharacter Represents a non-playable character. Inheritance object ExaminableObject Character NonPlayableCharacter Implements IInteractWithItem IConverser IExaminable IPlayerVisible Inherited Members Character.IsAlive Character.Interaction Character.Items Character.Kill() Character.AcquireItem(Item) Character.DequireItem(Item) Character.HasItem(Item, bool) Character.FindItem(string, out Item, bool) Character.Give(Item, Character) Character.Interact(Item) ExaminableObject.Examination ExaminableObject.ToString() ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.Examine() ExaminableObject.IsPlayerVisible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: BP.AdventureFramework.Assets.Characters Assembly: BP.AdventureFramework.dll Syntax public sealed class NonPlayableCharacter : Character, IInteractWithItem, IConverser, IExaminable, IPlayerVisible Constructors | Edit this page View Source NonPlayableCharacter(Identifier, Description, Conversation) Initializes a new instance of the NonPlayableCharacter class. Declaration public NonPlayableCharacter(Identifier identifier, Description description, Conversation conversation = null) Parameters Type Name Description Identifier identifier This NonPlayableCharacter's identifier. Description description The description of this NonPlayableCharacter. Conversation conversation The conversation. | Edit this page View Source NonPlayableCharacter(Identifier, Description, Conversation, bool, InteractionCallback) Initializes a new instance of the NonPlayableCharacter class. Declaration public NonPlayableCharacter(Identifier identifier, Description description, Conversation conversation, bool isAlive, InteractionCallback interaction) Parameters Type Name Description Identifier identifier This NonPlayableCharacter's identifier. Description description The description of this NonPlayableCharacter. Conversation conversation The conversation. bool isAlive Set if this NonPlayableCharacter is alive. InteractionCallback interaction Set this NonPlayableCharacter's interaction. | Edit this page View Source NonPlayableCharacter(Identifier, Description, Conversation, bool, InteractionCallback, ExaminationCallback) Initializes a new instance of the NonPlayableCharacter class. Declaration public NonPlayableCharacter(Identifier identifier, Description description, Conversation conversation, bool isAlive, InteractionCallback interaction, ExaminationCallback examination) Parameters Type Name Description Identifier identifier This NonPlayableCharacter's identifier. Description description The description of this NonPlayableCharacter. Conversation conversation The conversation. bool isAlive Set if this NonPlayableCharacter is alive. InteractionCallback interaction Set this NonPlayableCharacter's interaction. ExaminationCallback examination Set this NonPlayableCharacter's examination. | Edit this page View Source NonPlayableCharacter(string, string, Conversation) Initializes a new instance of the NonPlayableCharacter class. Declaration public NonPlayableCharacter(string identifier, string description, Conversation conversation = null) Parameters Type Name Description string identifier This NonPlayableCharacter's identifier. string description The description of this NonPlayableCharacter. Conversation conversation The conversation. Properties | Edit this page View Source Conversation Get or set the conversation. Declaration public Conversation Conversation { get; set; } Property Value Type Description Conversation Implements IInteractWithItem IConverser IExaminable IPlayerVisible"
  },
  "api/BP.AdventureFramework.Assets.Characters.PlayableCharacter.html": {
    "href": "api/BP.AdventureFramework.Assets.Characters.PlayableCharacter.html",
    "title": "Class PlayableCharacter | BP.AdventureFramework",
    "keywords": "Class PlayableCharacter Represents a playable character. Inheritance object ExaminableObject Character PlayableCharacter Implements IExaminable IPlayerVisible IInteractWithItem Inherited Members Character.IsAlive Character.Interaction Character.Items Character.Kill() Character.AcquireItem(Item) Character.DequireItem(Item) Character.HasItem(Item, bool) Character.FindItem(string, out Item, bool) Character.Give(Item, Character) Character.Interact(Item) ExaminableObject.Examination ExaminableObject.ToString() ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.Examine() ExaminableObject.IsPlayerVisible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: BP.AdventureFramework.Assets.Characters Assembly: BP.AdventureFramework.dll Syntax public sealed class PlayableCharacter : Character, IExaminable, IPlayerVisible, IInteractWithItem Constructors | Edit this page View Source PlayableCharacter(Identifier, Description, params Item[]) Initializes a new instance of the PlayableCharacter class. Declaration public PlayableCharacter(Identifier identifier, Description description, params Item[] items) Parameters Type Name Description Identifier identifier This PlayableCharacter's identifier. Description description The description of the player. Item[] items The players items. | Edit this page View Source PlayableCharacter(string, string, params Item[]) Initializes a new instance of the PlayableCharacter class. Declaration public PlayableCharacter(string identifier, string description, params Item[] items) Parameters Type Name Description string identifier This PlayableCharacter's identifier. string description The description of the player. Item[] items The players items. Methods | Edit this page View Source UseItem(Item, IInteractWithItem) Use an item. Declaration public InteractionResult UseItem(Item item, IInteractWithItem targetObject) Parameters Type Name Description Item item The item to use. IInteractWithItem targetObject A target object to use the item on. Returns Type Description InteractionResult The result of the items usage. Implements IExaminable IPlayerVisible IInteractWithItem"
  },
  "api/BP.AdventureFramework.Assets.Characters.html": {
    "href": "api/BP.AdventureFramework.Assets.Characters.html",
    "title": "Namespace BP.AdventureFramework.Assets.Characters | BP.AdventureFramework",
    "keywords": "Namespace BP.AdventureFramework.Assets.Characters Classes Character Represents a generic in game character. NonPlayableCharacter Represents a non-playable character. PlayableCharacter Represents a playable character. Interfaces IConverser Represents an object that can converse."
  },
  "api/BP.AdventureFramework.Assets.ConditionalDescription.html": {
    "href": "api/BP.AdventureFramework.Assets.ConditionalDescription.html",
    "title": "Class ConditionalDescription | BP.AdventureFramework",
    "keywords": "Class ConditionalDescription Represents a conditional description of an object. Inheritance object Description ConditionalDescription Inherited Members Description.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Assets Assembly: BP.AdventureFramework.dll Syntax public sealed class ConditionalDescription : Description Constructors | Edit this page View Source ConditionalDescription(string, string, Condition) Initializes anew instance of the ConditionalDescription class. Declaration public ConditionalDescription(string trueDescription, string falseDescription, Condition condition) Parameters Type Name Description string trueDescription The true description. string falseDescription The false description. Condition condition The condition. Properties | Edit this page View Source Condition Get or set the condition Declaration public Condition Condition { get; set; } Property Value Type Description Condition Methods | Edit this page View Source GetDescription() Get the description. Declaration public override string GetDescription() Returns Type Description string The description. Overrides Description.GetDescription()"
  },
  "api/BP.AdventureFramework.Assets.Description.html": {
    "href": "api/BP.AdventureFramework.Assets.Description.html",
    "title": "Class Description | BP.AdventureFramework",
    "keywords": "Class Description Represents a description of an object. Inheritance object Description ConditionalDescription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Assets Assembly: BP.AdventureFramework.dll Syntax public class Description Constructors | Edit this page View Source Description(string) Initializes a new instance of the Description class Declaration public Description(string description) Parameters Type Name Description string description The description Properties | Edit this page View Source DefaultDescription Get or set the description. Declaration protected string DefaultDescription { get; set; } Property Value Type Description string | Edit this page View Source Empty Get an empty description. Declaration public static Description Empty { get; } Property Value Type Description Description Methods | Edit this page View Source GetDescription() Get the description. Declaration public virtual string GetDescription() Returns Type Description string The description."
  },
  "api/BP.AdventureFramework.Assets.ExaminableObject.html": {
    "href": "api/BP.AdventureFramework.Assets.ExaminableObject.html",
    "title": "Class ExaminableObject | BP.AdventureFramework",
    "keywords": "Class ExaminableObject Represents an object that can be examined. Inheritance object ExaminableObject Character Item Exit Overworld Region Room Implements IExaminable IPlayerVisible Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: BP.AdventureFramework.Assets Assembly: BP.AdventureFramework.dll Syntax public class ExaminableObject : IExaminable, IPlayerVisible Properties | Edit this page View Source Attributes Get the attribute manager for this object. Declaration public AttributeManager Attributes { get; } Property Value Type Description AttributeManager | Edit this page View Source Commands Get or set this objects commands. Declaration public CustomCommand[] Commands { get; set; } Property Value Type Description CustomCommand[] | Edit this page View Source Description Get or set a description of this object. Declaration public Description Description { get; set; } Property Value Type Description Description | Edit this page View Source Examination Get or set the callback handling all examination of this object. Declaration public ExaminationCallback Examination { get; set; } Property Value Type Description ExaminationCallback | Edit this page View Source Identifier Get this objects identifier. Declaration public Identifier Identifier { get; protected set; } Property Value Type Description Identifier | Edit this page View Source IsPlayerVisible Get or set if this is visible to the player. Declaration public bool IsPlayerVisible { get; set; } Property Value Type Description bool Methods | Edit this page View Source Examine() Examine this object. Declaration public virtual ExaminationResult Examine() Returns Type Description ExaminationResult A ExaminationResult detailing the examination of this object. | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Implements IExaminable IPlayerVisible"
  },
  "api/BP.AdventureFramework.Assets.ExaminationCallback.html": {
    "href": "api/BP.AdventureFramework.Assets.ExaminationCallback.html",
    "title": "Delegate ExaminationCallback | BP.AdventureFramework",
    "keywords": "Delegate ExaminationCallback Represents the callback for examinations. Namespace: BP.AdventureFramework.Assets Assembly: BP.AdventureFramework.dll Syntax public delegate ExaminationResult ExaminationCallback(IExaminable obj) Parameters Type Name Description IExaminable obj The object to examine. Returns Type Description ExaminationResult A string representing the result of the examination."
  },
  "api/BP.AdventureFramework.Assets.ExaminationResult.html": {
    "href": "api/BP.AdventureFramework.Assets.ExaminationResult.html",
    "title": "Class ExaminationResult | BP.AdventureFramework",
    "keywords": "Class ExaminationResult Represents the result of an examination. Inheritance object Result ExaminationResult Inherited Members Result.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Assets Assembly: BP.AdventureFramework.dll Syntax public class ExaminationResult : Result Constructors | Edit this page View Source ExaminationResult(string) Initializes a new instance of the ExaminationResult class. Declaration public ExaminationResult(string description) Parameters Type Name Description string description A description of the result."
  },
  "api/BP.AdventureFramework.Assets.IExaminable.html": {
    "href": "api/BP.AdventureFramework.Assets.IExaminable.html",
    "title": "Interface IExaminable | BP.AdventureFramework",
    "keywords": "Interface IExaminable Represents any object that is examinable. Inherited Members IPlayerVisible.IsPlayerVisible Namespace: BP.AdventureFramework.Assets Assembly: BP.AdventureFramework.dll Syntax public interface IExaminable : IPlayerVisible Properties | Edit this page View Source Attributes Get the attribute manager for this object. Declaration AttributeManager Attributes { get; } Property Value Type Description AttributeManager | Edit this page View Source Commands Get or set this objects commands. Declaration CustomCommand[] Commands { get; set; } Property Value Type Description CustomCommand[] | Edit this page View Source Description Get or set a description of this object. Declaration Description Description { get; set; } Property Value Type Description Description | Edit this page View Source Identifier Get this objects identifier. Declaration Identifier Identifier { get; } Property Value Type Description Identifier Methods | Edit this page View Source Examine() Examine this object. Declaration ExaminationResult Examine() Returns Type Description ExaminationResult A ExaminationResult detailing the examination of this object."
  },
  "api/BP.AdventureFramework.Assets.IPlayerVisible.html": {
    "href": "api/BP.AdventureFramework.Assets.IPlayerVisible.html",
    "title": "Interface IPlayerVisible | BP.AdventureFramework",
    "keywords": "Interface IPlayerVisible Represents any object that is visible to a player. Namespace: BP.AdventureFramework.Assets Assembly: BP.AdventureFramework.dll Syntax public interface IPlayerVisible Properties | Edit this page View Source IsPlayerVisible Get or set if this is visible to the player. Declaration bool IsPlayerVisible { get; set; } Property Value Type Description bool"
  },
  "api/BP.AdventureFramework.Assets.Identifier.html": {
    "href": "api/BP.AdventureFramework.Assets.Identifier.html",
    "title": "Class Identifier | BP.AdventureFramework",
    "keywords": "Class Identifier Provides a class that can be used as an identifier. Inheritance object Identifier Implements IEquatable<string> IEquatable<Identifier> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: BP.AdventureFramework.Assets Assembly: BP.AdventureFramework.dll Syntax public sealed class Identifier : IEquatable<string>, IEquatable<Identifier> Constructors | Edit this page View Source Identifier(string) Creates a new instance of the Identifier class. Declaration public Identifier(string name) Parameters Type Name Description string name The name. Properties | Edit this page View Source Empty Get an empty identifier. Declaration public static Identifier Empty { get; } Property Value Type Description Identifier | Edit this page View Source IdentifiableName Get the name as a case insensitive identifier. Declaration public string IdentifiableName { get; } Property Value Type Description string | Edit this page View Source Name Get the name. Declaration public string Name { get; } Property Value Type Description string Methods | Edit this page View Source Equals(Identifier) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Identifier other) Parameters Type Name Description Identifier other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(string) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(string other) Parameters Type Name Description string other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Implements IEquatable<T> IEquatable<T>"
  },
  "api/BP.AdventureFramework.Assets.Interaction.Condition.html": {
    "href": "api/BP.AdventureFramework.Assets.Interaction.Condition.html",
    "title": "Delegate Condition | BP.AdventureFramework",
    "keywords": "Delegate Condition Represents a callback for conditions. Namespace: BP.AdventureFramework.Assets.Interaction Assembly: BP.AdventureFramework.dll Syntax public delegate bool Condition() Returns Type Description bool The result of the condition."
  },
  "api/BP.AdventureFramework.Assets.Interaction.IInteractWithItem.html": {
    "href": "api/BP.AdventureFramework.Assets.Interaction.IInteractWithItem.html",
    "title": "Interface IInteractWithItem | BP.AdventureFramework",
    "keywords": "Interface IInteractWithItem Represents any object that can interact with an item. Namespace: BP.AdventureFramework.Assets.Interaction Assembly: BP.AdventureFramework.dll Syntax public interface IInteractWithItem Methods | Edit this page View Source Interact(Item) Interact with an item. Declaration InteractionResult Interact(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description InteractionResult The result of the interaction."
  },
  "api/BP.AdventureFramework.Assets.Interaction.InteractionCallback.html": {
    "href": "api/BP.AdventureFramework.Assets.Interaction.InteractionCallback.html",
    "title": "Delegate InteractionCallback | BP.AdventureFramework",
    "keywords": "Delegate InteractionCallback Represents the callback for interacting with objects. Namespace: BP.AdventureFramework.Assets.Interaction Assembly: BP.AdventureFramework.dll Syntax public delegate InteractionResult InteractionCallback(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description InteractionResult The result of the interaction."
  },
  "api/BP.AdventureFramework.Assets.Interaction.InteractionEffect.html": {
    "href": "api/BP.AdventureFramework.Assets.Interaction.InteractionEffect.html",
    "title": "Enum InteractionEffect | BP.AdventureFramework",
    "keywords": "Enum InteractionEffect Enumeration of interaction effects. Namespace: BP.AdventureFramework.Assets.Interaction Assembly: BP.AdventureFramework.dll Syntax public enum InteractionEffect Fields Name Description FatalEffect A fatal effect to the interaction. ItemMorphed Item morphed into another object. ItemUsedUp Item was used up. NoEffect No effect to the interaction on either the item or the target. SelfContained Any other self contained effect. TargetUsedUp The target was used up."
  },
  "api/BP.AdventureFramework.Assets.Interaction.InteractionResult.html": {
    "href": "api/BP.AdventureFramework.Assets.Interaction.InteractionResult.html",
    "title": "Class InteractionResult | BP.AdventureFramework",
    "keywords": "Class InteractionResult Represents a result of an interaction. Inheritance object Result InteractionResult Inherited Members Result.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Assets.Interaction Assembly: BP.AdventureFramework.dll Syntax public sealed class InteractionResult : Result Constructors | Edit this page View Source InteractionResult(InteractionEffect, Item) Initializes a new instance of the InteractionResult class. Declaration public InteractionResult(InteractionEffect effect, Item item) Parameters Type Name Description InteractionEffect effect The effect of this interaction. Item item The item used in this interaction. | Edit this page View Source InteractionResult(InteractionEffect, Item, string) Initializes a new instance of the InteractionResult class. Declaration public InteractionResult(InteractionEffect effect, Item item, string descriptionOfEffect) Parameters Type Name Description InteractionEffect effect The effect of this interaction. Item item The item used in this interaction. string descriptionOfEffect A description of the effect. Properties | Edit this page View Source Effect Get the effect. Declaration public InteractionEffect Effect { get; } Property Value Type Description InteractionEffect | Edit this page View Source Item Get the item used in the interaction. Declaration public Item Item { get; } Property Value Type Description Item"
  },
  "api/BP.AdventureFramework.Assets.Interaction.Reaction.html": {
    "href": "api/BP.AdventureFramework.Assets.Interaction.Reaction.html",
    "title": "Class Reaction | BP.AdventureFramework",
    "keywords": "Class Reaction Represents a reaction. Inheritance object Reaction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Assets.Interaction Assembly: BP.AdventureFramework.dll Syntax public sealed class Reaction Constructors | Edit this page View Source Reaction(ReactionResult, string) Initializes a new instance of the Reaction class. Declaration public Reaction(ReactionResult result, string description) Parameters Type Name Description ReactionResult result The result. string description A description of the result. Properties | Edit this page View Source Description Get a description of the result. Declaration public string Description { get; } Property Value Type Description string | Edit this page View Source Result Get the result. Declaration public ReactionResult Result { get; } Property Value Type Description ReactionResult"
  },
  "api/BP.AdventureFramework.Assets.Interaction.ReactionResult.html": {
    "href": "api/BP.AdventureFramework.Assets.Interaction.ReactionResult.html",
    "title": "Enum ReactionResult | BP.AdventureFramework",
    "keywords": "Enum ReactionResult Enumeration of reaction results. Namespace: BP.AdventureFramework.Assets.Interaction Assembly: BP.AdventureFramework.dll Syntax public enum ReactionResult Fields Name Description Error Error. Fatal A reaction that has a fatal effect on the player. Internal An internal reaction. OK OK."
  },
  "api/BP.AdventureFramework.Assets.Interaction.Result.html": {
    "href": "api/BP.AdventureFramework.Assets.Interaction.Result.html",
    "title": "Class Result | BP.AdventureFramework",
    "keywords": "Class Result Represents a result. Inheritance object Result ExaminationResult InteractionResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Assets.Interaction Assembly: BP.AdventureFramework.dll Syntax public abstract class Result Constructors | Edit this page View Source Result() Initializes a new instance of the Result class. Declaration protected Result() Properties | Edit this page View Source Description Get the description. Declaration public string Description { get; protected set; } Property Value Type Description string"
  },
  "api/BP.AdventureFramework.Assets.Interaction.html": {
    "href": "api/BP.AdventureFramework.Assets.Interaction.html",
    "title": "Namespace BP.AdventureFramework.Assets.Interaction | BP.AdventureFramework",
    "keywords": "Namespace BP.AdventureFramework.Assets.Interaction Classes InteractionResult Represents a result of an interaction. Reaction Represents a reaction. Result Represents a result. Interfaces IInteractWithItem Represents any object that can interact with an item. Enums InteractionEffect Enumeration of interaction effects. ReactionResult Enumeration of reaction results. Delegates Condition Represents a callback for conditions. InteractionCallback Represents the callback for interacting with objects."
  },
  "api/BP.AdventureFramework.Assets.Item.html": {
    "href": "api/BP.AdventureFramework.Assets.Item.html",
    "title": "Class Item | BP.AdventureFramework",
    "keywords": "Class Item Represents an item that can be used within the game. Inheritance object ExaminableObject Item Implements IExaminable IPlayerVisible IInteractWithItem Inherited Members ExaminableObject.Examination ExaminableObject.ToString() ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.Examine() ExaminableObject.IsPlayerVisible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: BP.AdventureFramework.Assets Assembly: BP.AdventureFramework.dll Syntax public sealed class Item : ExaminableObject, IExaminable, IPlayerVisible, IInteractWithItem Constructors | Edit this page View Source Item(Identifier, Description, bool) Initializes a new instance of the Item class. Declaration public Item(Identifier identifier, Description description, bool isTakeable = false) Parameters Type Name Description Identifier identifier This Items identifier. Description description A description of this Item. bool isTakeable Specify if this item is takeable. | Edit this page View Source Item(string, string, bool) Initializes a new instance of the Item class. Declaration public Item(string identifier, string description, bool isTakeable = false) Parameters Type Name Description string identifier This Items identifier. string description A description of this Item. bool isTakeable Specify if this item is takeable. Properties | Edit this page View Source Interaction Get or set the interaction. Declaration public InteractionCallback Interaction { get; set; } Property Value Type Description InteractionCallback | Edit this page View Source IsTakeable Get or set if this is takeable. Declaration public bool IsTakeable { get; } Property Value Type Description bool Methods | Edit this page View Source Interact(Item) Interact with an item. Declaration public InteractionResult Interact(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description InteractionResult The result of the interaction. | Edit this page View Source Morph(Item) Handle item morphing. Declaration public void Morph(Item item) Parameters Type Name Description Item item The item to morph into. Implements IExaminable IPlayerVisible IInteractWithItem"
  },
  "api/BP.AdventureFramework.Assets.Locations.Direction.html": {
    "href": "api/BP.AdventureFramework.Assets.Locations.Direction.html",
    "title": "Enum Direction | BP.AdventureFramework",
    "keywords": "Enum Direction Enumeration of directions. Namespace: BP.AdventureFramework.Assets.Locations Assembly: BP.AdventureFramework.dll Syntax public enum Direction Fields Name Description Down Down. East East. North North. South South. Up Up. West West. Extension Methods DirectionExtensions.Inverse(Direction)"
  },
  "api/BP.AdventureFramework.Assets.Locations.Exit.html": {
    "href": "api/BP.AdventureFramework.Assets.Locations.Exit.html",
    "title": "Class Exit | BP.AdventureFramework",
    "keywords": "Class Exit Represents an exit from a GameLocation. Inheritance object ExaminableObject Exit Implements IExaminable IPlayerVisible IInteractWithItem Inherited Members ExaminableObject.Examination ExaminableObject.ToString() ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.Examine() ExaminableObject.IsPlayerVisible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: BP.AdventureFramework.Assets.Locations Assembly: BP.AdventureFramework.dll Syntax public sealed class Exit : ExaminableObject, IExaminable, IPlayerVisible, IInteractWithItem Constructors | Edit this page View Source Exit(Direction, bool, Identifier, Description) Initializes a new instance of the Exit class. Declaration public Exit(Direction direction, bool isLocked = false, Identifier identifier = null, Description description = null) Parameters Type Name Description Direction direction The direction of the exit. bool isLocked If this exit is locked. Identifier identifier An identifier for the exit. Description description A description of the exit. Properties | Edit this page View Source Direction Get the direction of the exit. Declaration public Direction Direction { get; } Property Value Type Description Direction | Edit this page View Source Interaction Get or set the interaction. Declaration public InteractionCallback Interaction { get; set; } Property Value Type Description InteractionCallback | Edit this page View Source IsLocked Get if this Exit is locked. Declaration public bool IsLocked { get; } Property Value Type Description bool Methods | Edit this page View Source Interact(Item) Interact with an item. Declaration public InteractionResult Interact(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description InteractionResult The result of the interaction. | Edit this page View Source Lock() Lock this exit. Declaration public void Lock() | Edit this page View Source Unlock() Unlock this exit. Declaration public void Unlock() Implements IExaminable IPlayerVisible IInteractWithItem"
  },
  "api/BP.AdventureFramework.Assets.Locations.Matrix.html": {
    "href": "api/BP.AdventureFramework.Assets.Locations.Matrix.html",
    "title": "Class Matrix | BP.AdventureFramework",
    "keywords": "Class Matrix Provides a 3D matrix of rooms. Inheritance object Matrix Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Assets.Locations Assembly: BP.AdventureFramework.dll Syntax public sealed class Matrix Constructors | Edit this page View Source Matrix(Room[,,]) Initializes a new instance of the Matrix class. Declaration public Matrix(Room[,,] rooms) Parameters Type Name Description Room[,,] rooms The rooms to be represented. Properties | Edit this page View Source Depth Get the depth of the matrix. Declaration public int Depth { get; } Property Value Type Description int | Edit this page View Source Height Get the height of the matrix. Declaration public int Height { get; } Property Value Type Description int | Edit this page View Source this[int, int, int] Get a room in this matrix. Declaration public Room this[int x, int y, int z] { get; } Parameters Type Name Description int x The x position. int y The y position. int z The z position. Property Value Type Description Room The room. | Edit this page View Source Width Get the width of the matrix. Declaration public int Width { get; } Property Value Type Description int Methods | Edit this page View Source ToRooms() Return this matrix as a one dimensional array of rooms. Declaration public Room[] ToRooms() Returns Type Description Room[] The rooms, as a one dimensional array."
  },
  "api/BP.AdventureFramework.Assets.Locations.Overworld.html": {
    "href": "api/BP.AdventureFramework.Assets.Locations.Overworld.html",
    "title": "Class Overworld | BP.AdventureFramework",
    "keywords": "Class Overworld Represents an entire overworld. Inheritance object ExaminableObject Overworld Implements IExaminable IPlayerVisible Inherited Members ExaminableObject.Examination ExaminableObject.ToString() ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.IsPlayerVisible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: BP.AdventureFramework.Assets.Locations Assembly: BP.AdventureFramework.dll Syntax public sealed class Overworld : ExaminableObject, IExaminable, IPlayerVisible Constructors | Edit this page View Source Overworld(Identifier, Description) Initializes a new instance of the overworld class. Declaration public Overworld(Identifier identifier, Description description) Parameters Type Name Description Identifier identifier The identifier for this overworld. Description description A description of this overworld. | Edit this page View Source Overworld(string, string) Initializes a new instance of the overworld class. Declaration public Overworld(string identifier, string description) Parameters Type Name Description string identifier The identifier for this overworld. string description A description of this overworld. Properties | Edit this page View Source CurrentRegion Get the current region. Declaration public Region CurrentRegion { get; } Property Value Type Description Region | Edit this page View Source Regions Get the regions in this overworld. Declaration public Region[] Regions { get; } Property Value Type Description Region[] Methods | Edit this page View Source AddRegion(Region) Add a region to this overworld. Declaration public void AddRegion(Region region) Parameters Type Name Description Region region The region to add. | Edit this page View Source Examine() Examine this object. Declaration public override ExaminationResult Examine() Returns Type Description ExaminationResult A ExaminationResult detailing the examination of this object. Overrides ExaminableObject.Examine() | Edit this page View Source FindRegion(string, out Region) Find a region. Declaration public bool FindRegion(string regionName, out Region region) Parameters Type Name Description string regionName The regions name. Region region The region. Returns Type Description bool True if the region was found. | Edit this page View Source Move(Region) Move to a region. Declaration public bool Move(Region region) Parameters Type Name Description Region region The region to move to. Returns Type Description bool True if the region could be moved to, else false. | Edit this page View Source RemoveRegion(Region) Remove a region from this overworld. Declaration public void RemoveRegion(Region region) Parameters Type Name Description Region region The region to remove. Implements IExaminable IPlayerVisible"
  },
  "api/BP.AdventureFramework.Assets.Locations.Region.html": {
    "href": "api/BP.AdventureFramework.Assets.Locations.Region.html",
    "title": "Class Region | BP.AdventureFramework",
    "keywords": "Class Region Represents a region. Inheritance object ExaminableObject Region Implements IExaminable IPlayerVisible Inherited Members ExaminableObject.Examination ExaminableObject.ToString() ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.IsPlayerVisible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: BP.AdventureFramework.Assets.Locations Assembly: BP.AdventureFramework.dll Syntax public sealed class Region : ExaminableObject, IExaminable, IPlayerVisible Constructors | Edit this page View Source Region(Identifier, Description) Initializes a new instance of the Region class. Declaration public Region(Identifier identifier, Description description) Parameters Type Name Description Identifier identifier This Regions identifier. Description description The description of this Region. | Edit this page View Source Region(string, string) Initializes a new instance of the Region class. Declaration public Region(string identifier, string description) Parameters Type Name Description string identifier This Regions identifier. string description The description of this Region. Properties | Edit this page View Source CurrentRoom Get the current room. Declaration public Room CurrentRoom { get; } Property Value Type Description Room | Edit this page View Source this[int, int, int] Get a room at a specified location. Declaration public Room this[int x, int y, int z] { get; } Parameters Type Name Description int x The x position. int y The y position. int z The z position. Property Value Type Description Room The room. | Edit this page View Source Rooms Get the number of rooms region contains. Declaration public int Rooms { get; } Property Value Type Description int | Edit this page View Source VisibleWithoutDiscovery Get if the current region is visible without discovery. Declaration public bool VisibleWithoutDiscovery { get; set; } Property Value Type Description bool Methods | Edit this page View Source AddRoom(Room, int, int, int) Add a Room to this region. Declaration public bool AddRoom(Room room, int x, int y, int z) Parameters Type Name Description Room room The room to add. int x The x position within the region. int y The y position within the region. int z The z position within the region. Returns Type Description bool | Edit this page View Source Examine() Examine this object. Declaration public override ExaminationResult Examine() Returns Type Description ExaminationResult A ExaminationResult detailing the examination of this object. Overrides ExaminableObject.Examine() | Edit this page View Source GetAdjoiningRoom(Direction) Get an adjoining room to the Region.CurrentRoom property. Declaration public Room GetAdjoiningRoom(Direction direction) Parameters Type Name Description Direction direction The direction of the adjoining Room. Returns Type Description Room The adjoining Room. | Edit this page View Source GetAdjoiningRoom(Direction, Room) Get an adjoining room to a room. Declaration public Room GetAdjoiningRoom(Direction direction, Room room) Parameters Type Name Description Direction direction The direction of the adjoining room. Room room The room to use as the reference. Returns Type Description Room The adjoining room. | Edit this page View Source GetPositionOfRoom(Room) Get the position of a room. Declaration public RoomPosition GetPositionOfRoom(Room room) Parameters Type Name Description Room room The room. Returns Type Description RoomPosition The position of the room. | Edit this page View Source JumpToRoom(int, int, int) Jump to a room. Declaration public bool JumpToRoom(int x, int y, int z) Parameters Type Name Description int x The x location of the room. int y The y location of the room. int z The z location of the room. Returns Type Description bool True if the room could be jumped to, else false. | Edit this page View Source Move(Direction) Move in a direction. Declaration public bool Move(Direction direction) Parameters Type Name Description Direction direction The direction to move in. Returns Type Description bool True if the move was successful, else false. | Edit this page View Source SetStartRoom(Room) Set the room to start in. Declaration public void SetStartRoom(Room room) Parameters Type Name Description Room room The Room to start in. | Edit this page View Source SetStartRoom(int, int, int) Set the room to start in. Declaration public void SetStartRoom(int x, int y, int z) Parameters Type Name Description int x The x position. int y The y position. int z The z position. | Edit this page View Source ToMatrix() Get this region as a 3D matrix of rooms. Declaration public Matrix ToMatrix() Returns Type Description Matrix This region, as a 3D matrix. | Edit this page View Source UnlockDoorPair(Direction) Unlock a pair of doors in a specified direction in the CurrentRoom. Declaration public bool UnlockDoorPair(Direction direction) Parameters Type Name Description Direction direction The direction to unlock in. Returns Type Description bool True if the door pair could be unlocked, else false. Implements IExaminable IPlayerVisible"
  },
  "api/BP.AdventureFramework.Assets.Locations.Room.html": {
    "href": "api/BP.AdventureFramework.Assets.Locations.Room.html",
    "title": "Class Room | BP.AdventureFramework",
    "keywords": "Class Room Represents a room Inheritance object ExaminableObject Room Implements IExaminable IPlayerVisible IInteractWithItem Inherited Members ExaminableObject.Examination ExaminableObject.ToString() ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.IsPlayerVisible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: BP.AdventureFramework.Assets.Locations Assembly: BP.AdventureFramework.dll Syntax public sealed class Room : ExaminableObject, IExaminable, IPlayerVisible, IInteractWithItem Constructors | Edit this page View Source Room(Identifier, Description, params Exit[]) Initializes a new instance of the Room class. Declaration public Room(Identifier identifier, Description description, params Exit[] exits) Parameters Type Name Description Identifier identifier This rooms identifier. Description description This rooms description. Exit[] exits The exits from this room. | Edit this page View Source Room(Identifier, Description, Exit[], params Item[]) Initializes a new instance of the Room class. Declaration public Room(Identifier identifier, Description description, Exit[] exits = null, params Item[] items) Parameters Type Name Description Identifier identifier This rooms identifier. Description description This rooms description. Exit[] exits The exits from this room. Item[] items The items in this room. | Edit this page View Source Room(string, string, params Exit[]) Initializes a new instance of the Room class. Declaration public Room(string identifier, string description, params Exit[] exits) Parameters Type Name Description string identifier This rooms identifier. string description This rooms description. Exit[] exits The exits from this room. | Edit this page View Source Room(string, string, Exit[], params Item[]) Initializes a new instance of the Room class. Declaration public Room(string identifier, string description, Exit[] exits = null, params Item[] items) Parameters Type Name Description string identifier This rooms identifier. string description This rooms description. Exit[] exits The exits from this room. Item[] items The items in this room. Properties | Edit this page View Source Characters Get the characters in this Room. Declaration public NonPlayableCharacter[] Characters { get; } Property Value Type Description NonPlayableCharacter[] | Edit this page View Source EnteredFrom Get which direction this Room was entered from. Declaration public Direction? EnteredFrom { get; } Property Value Type Description Direction? | Edit this page View Source Exits Get the exits. Declaration public Exit[] Exits { get; } Property Value Type Description Exit[] | Edit this page View Source HasBeenVisited Get if this location has been visited. Declaration public bool HasBeenVisited { get; } Property Value Type Description bool | Edit this page View Source Interaction Get or set the interaction. Declaration public InteractionCallback Interaction { get; set; } Property Value Type Description InteractionCallback | Edit this page View Source this[Direction] Get an exit. Declaration public Exit this[Direction direction] { get; } Parameters Type Name Description Direction direction The direction of an exit. Property Value Type Description Exit The exit. | Edit this page View Source Items Get the items in this Room. Declaration public Item[] Items { get; } Property Value Type Description Item[] | Edit this page View Source UnlockedExits Get all unlocked exits. Declaration public Exit[] UnlockedExits { get; } Property Value Type Description Exit[] Methods | Edit this page View Source AddCharacter(NonPlayableCharacter) Add a character to this room. Declaration public void AddCharacter(NonPlayableCharacter character) Parameters Type Name Description NonPlayableCharacter character The character to add. | Edit this page View Source AddExit(Exit) Add an exit to this room. Declaration public void AddExit(Exit exit) Parameters Type Name Description Exit exit The exit to add. | Edit this page View Source AddItem(Item) Add an item to this room. Declaration public void AddItem(Item item) Parameters Type Name Description Item item The item to add. | Edit this page View Source CanMove(Direction) Test if a move is possible. Declaration public bool CanMove(Direction direction) Parameters Type Name Description Direction direction The direction to test. Returns Type Description bool If a move in the specified direction is possible. | Edit this page View Source ContainsCharacter(NonPlayableCharacter, bool) Get if this Room contains a character. Declaration public bool ContainsCharacter(NonPlayableCharacter character, bool includeInvisibleCharacters = false) Parameters Type Name Description NonPlayableCharacter character The character. bool includeInvisibleCharacters Specify if invisible characters should be included. Returns Type Description bool True if the item is in this room, else false. | Edit this page View Source ContainsCharacter(string, bool) Get if this Room contains a character. Declaration public bool ContainsCharacter(string characterName, bool includeInvisibleCharacters = false) Parameters Type Name Description string characterName The character name to check for. bool includeInvisibleCharacters Specify if invisible characters should be included. Returns Type Description bool True if the item is in this room, else false. | Edit this page View Source ContainsExit(Direction, bool) Get if this Room contains an exit. Declaration public bool ContainsExit(Direction direction, bool includeInvisibleExits = false) Parameters Type Name Description Direction direction The direction of the exit to check for. bool includeInvisibleExits Specify if invisible exits should be included. Returns Type Description bool True if the exit exists, else false. | Edit this page View Source ContainsExit(bool) Get if this Room contains an exit. Declaration public bool ContainsExit(bool includeInvisibleExits = false) Parameters Type Name Description bool includeInvisibleExits Specify if invisible exits should be included. Returns Type Description bool True if the exit exists, else false. | Edit this page View Source ContainsInteractionTarget(string) Get if this Room contains an interaction target. Declaration public bool ContainsInteractionTarget(string targetName) Parameters Type Name Description string targetName The name of the target to check for. Returns Type Description bool True if the target is in this room, else false. | Edit this page View Source ContainsItem(Item) Get if this Room contains an item. This will not include items whose ExaminableObject.IsPlayerVisible property is set to false. Declaration public bool ContainsItem(Item item) Parameters Type Name Description Item item The item to check for. Returns Type Description bool True if the item is in this room, else false. | Edit this page View Source ContainsItem(string, bool) Get if this Room contains an item. Declaration public bool ContainsItem(string itemName, bool includeInvisibleItems = false) Parameters Type Name Description string itemName The item name to check for. bool includeInvisibleItems Specify if invisible items should be included. Returns Type Description bool True if the item is in this room, else false. | Edit this page View Source Examine() Handle examination this Room. Declaration public override ExaminationResult Examine() Returns Type Description ExaminationResult The result of this examination. Overrides ExaminableObject.Examine() | Edit this page View Source FindCharacter(string, out NonPlayableCharacter) Find a character. This will not include characters whose ExaminableObject.IsPlayerVisible property is set to false. Declaration public bool FindCharacter(string characterName, out NonPlayableCharacter character) Parameters Type Name Description string characterName The character. NonPlayableCharacter character The character name. Returns Type Description bool True if the character was found. | Edit this page View Source FindCharacter(string, out NonPlayableCharacter, bool) Find a character. Declaration public bool FindCharacter(string characterName, out NonPlayableCharacter character, bool includeInvisibleCharacters) Parameters Type Name Description string characterName The character name. NonPlayableCharacter character The character. bool includeInvisibleCharacters Specify if invisible characters should be included. Returns Type Description bool True if the character was found. | Edit this page View Source FindExit(Direction, bool, out Exit) Find an exit. Declaration public bool FindExit(Direction direction, bool includeInvisibleExits, out Exit exit) Parameters Type Name Description Direction direction The exits direction. bool includeInvisibleExits Specify if invisible exists should be included. Exit exit The exit. Returns Type Description bool True if the exit was found. | Edit this page View Source FindInteractionTarget(string, out IInteractWithItem) Find an interaction target. Declaration public bool FindInteractionTarget(string targetName, out IInteractWithItem target) Parameters Type Name Description string targetName The targets name. IInteractWithItem target The target. Returns Type Description bool True if the target was found. | Edit this page View Source FindItem(string, out Item) Find an item. This will not include items whose ExaminableObject.IsPlayerVisible property is set to false Declaration public bool FindItem(string itemName, out Item item) Parameters Type Name Description string itemName The items name. This is case insensitive Item item The item Returns Type Description bool True if the item was found | Edit this page View Source FindItem(string, out Item, bool) Find an item. Declaration public bool FindItem(string itemName, out Item item, bool includeInvisibleItems) Parameters Type Name Description string itemName The items name. Item item The item. bool includeInvisibleItems Specify is invisible items should be included. Returns Type Description bool True if the item was found. | Edit this page View Source HasLockedExitInDirection(Direction, bool) Get if this room has a visible locked exit in a specified direction. Declaration public bool HasLockedExitInDirection(Direction direction, bool includeInvisibleExits = false) Parameters Type Name Description Direction direction The direction to check. bool includeInvisibleExits Specify if invisible exits should be included. Returns Type Description bool If there is a locked exit in the specified direction. | Edit this page View Source HasUnlockedExitInDirection(Direction, bool) Get if this room has a visible unlocked exit in a specified direction. Declaration public bool HasUnlockedExitInDirection(Direction direction, bool includeInvisibleExits = false) Parameters Type Name Description Direction direction The direction to check. bool includeInvisibleExits Specify if invisible exits should be included. Returns Type Description bool If there is a unlocked exit in the specified direction. | Edit this page View Source Interact(Item) Interact with an item. Declaration public InteractionResult Interact(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description InteractionResult The result of the interaction. | Edit this page View Source MovedInto(Direction?) Handle movement into this GameLocation. Declaration public void MovedInto(Direction? fromDirection) Parameters Type Name Description Direction? fromDirection The direction movement into this Room is from. Use null if there is no direction. | Edit this page View Source RemoveCharacter(NonPlayableCharacter) Remove a character from the room. Declaration public void RemoveCharacter(NonPlayableCharacter character) Parameters Type Name Description NonPlayableCharacter character The character to remove. | Edit this page View Source RemoveExit(Exit) Remove an exit from the room. Declaration public void RemoveExit(Exit exit) Parameters Type Name Description Exit exit The exit to remove. | Edit this page View Source RemoveInteractionTarget(IInteractWithItem) Remove an interaction target from the room. Declaration public IInteractWithItem RemoveInteractionTarget(IInteractWithItem target) Parameters Type Name Description IInteractWithItem target The target to remove. Returns Type Description IInteractWithItem The target removed from this room. | Edit this page View Source RemoveItem(Item) Remove an item from the room. Declaration public void RemoveItem(Item item) Parameters Type Name Description Item item The item to remove. | Edit this page View Source SpecifyConditionalDescription(ConditionalDescription) Specify a conditional description of this room. Declaration public void SpecifyConditionalDescription(ConditionalDescription description) Parameters Type Name Description ConditionalDescription description The description of this room. Implements IExaminable IPlayerVisible IInteractWithItem"
  },
  "api/BP.AdventureFramework.Assets.Locations.RoomPosition.html": {
    "href": "api/BP.AdventureFramework.Assets.Locations.RoomPosition.html",
    "title": "Class RoomPosition | BP.AdventureFramework",
    "keywords": "Class RoomPosition Represents a room position. Inheritance object RoomPosition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Assets.Locations Assembly: BP.AdventureFramework.dll Syntax public class RoomPosition Constructors | Edit this page View Source RoomPosition(Room, int, int, int) Initializes a new instance of the RoomPosition class. Declaration public RoomPosition(Room room, int x, int y, int z) Parameters Type Name Description Room room The room/ int x The x position of the room. int y The y position of the room. int z The z position of the room. Properties | Edit this page View Source Room Get the room. Declaration public Room Room { get; } Property Value Type Description Room | Edit this page View Source X Get the X position of the room. Declaration public int X { get; } Property Value Type Description int | Edit this page View Source Y Get the Y position of the room. Declaration public int Y { get; } Property Value Type Description int | Edit this page View Source Z Get the Z position of the room. Declaration public int Z { get; } Property Value Type Description int Methods | Edit this page View Source IsAtPosition(int, int, int) Get if this RoomPosition is at a position. Declaration public bool IsAtPosition(int x, int y, int z) Parameters Type Name Description int x The X position. int y The Y position. int z The Z position. Returns Type Description bool True if this is at the position, else false."
  },
  "api/BP.AdventureFramework.Assets.Locations.ViewPoint.html": {
    "href": "api/BP.AdventureFramework.Assets.Locations.ViewPoint.html",
    "title": "Class ViewPoint | BP.AdventureFramework",
    "keywords": "Class ViewPoint Represents a view point from a room. Inheritance object ViewPoint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Assets.Locations Assembly: BP.AdventureFramework.dll Syntax public sealed class ViewPoint Properties | Edit this page View Source Any Get if there is a view in any direction. Declaration public bool Any { get; } Property Value Type Description bool | Edit this page View Source AnyNotVisited Get if there is a view in any direction. Declaration public bool AnyNotVisited { get; } Property Value Type Description bool | Edit this page View Source AnyVisited Get if there is a view in any direction. Declaration public bool AnyVisited { get; } Property Value Type Description bool | Edit this page View Source this[Direction] Get the room that lies in a specified direction. Declaration public Room this[Direction direction] { get; } Parameters Type Name Description Direction direction The direction to check. Property Value Type Description Room The room. | Edit this page View Source NoView Get a view point representing no view. Declaration public static ViewPoint NoView { get; } Property Value Type Description ViewPoint Methods | Edit this page View Source Create(Region) Create a new ViewPoint. Declaration public static ViewPoint Create(Region region) Parameters Type Name Description Region region The region to create the view point from. Returns Type Description ViewPoint The view point."
  },
  "api/BP.AdventureFramework.Assets.Locations.html": {
    "href": "api/BP.AdventureFramework.Assets.Locations.html",
    "title": "Namespace BP.AdventureFramework.Assets.Locations | BP.AdventureFramework",
    "keywords": "Namespace BP.AdventureFramework.Assets.Locations Classes Exit Represents an exit from a GameLocation. Matrix Provides a 3D matrix of rooms. Overworld Represents an entire overworld. Region Represents a region. Room Represents a room RoomPosition Represents a room position. ViewPoint Represents a view point from a room. Enums Direction Enumeration of directions."
  },
  "api/BP.AdventureFramework.Assets.Size.html": {
    "href": "api/BP.AdventureFramework.Assets.Size.html",
    "title": "Struct Size | BP.AdventureFramework",
    "keywords": "Struct Size Represents a size. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: BP.AdventureFramework.Assets Assembly: BP.AdventureFramework.dll Syntax public struct Size Constructors | Edit this page View Source Size(int, int) Initializes a new instance of the Size struct. Declaration public Size(int width, int height) Parameters Type Name Description int width The width. int height The height. Properties | Edit this page View Source Height Get the height. Declaration public int Height { get; } Property Value Type Description int | Edit this page View Source Width Get the width. Declaration public int Width { get; } Property Value Type Description int"
  },
  "api/BP.AdventureFramework.Assets.html": {
    "href": "api/BP.AdventureFramework.Assets.html",
    "title": "Namespace BP.AdventureFramework.Assets | BP.AdventureFramework",
    "keywords": "Namespace BP.AdventureFramework.Assets Classes ConditionalDescription Represents a conditional description of an object. Description Represents a description of an object. ExaminableObject Represents an object that can be examined. ExaminationResult Represents the result of an examination. Identifier Provides a class that can be used as an identifier. Item Represents an item that can be used within the game. Structs Size Represents a size. Interfaces IExaminable Represents any object that is examinable. IPlayerVisible Represents any object that is visible to a player. Delegates ExaminationCallback Represents the callback for examinations."
  },
  "api/BP.AdventureFramework.Commands.CustomCommand.html": {
    "href": "api/BP.AdventureFramework.Commands.CustomCommand.html",
    "title": "Class CustomCommand | BP.AdventureFramework",
    "keywords": "Class CustomCommand Provides a custom command. Inheritance object CustomCommand Implements ICommand IPlayerVisible Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Commands Assembly: BP.AdventureFramework.dll Syntax public class CustomCommand : ICommand, IPlayerVisible Constructors | Edit this page View Source CustomCommand(CommandHelp, bool, CustomCommandCallback) Initializes a new instance of the CustomCommand class. Declaration public CustomCommand(CommandHelp help, bool isPlayerVisible, CustomCommandCallback callback) Parameters Type Name Description CommandHelp help The help for this command. bool isPlayerVisible If this is visible to the player. CustomCommandCallback callback The callback to invoke when this command is invoked. Properties | Edit this page View Source Arguments Get or set the arguments. Declaration public string[] Arguments { get; set; } Property Value Type Description string[] | Edit this page View Source Help Get the help for this command. Declaration public CommandHelp Help { get; } Property Value Type Description CommandHelp | Edit this page View Source IsPlayerVisible Get or set if this is visible to the player. Declaration public bool IsPlayerVisible { get; set; } Property Value Type Description bool Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand IPlayerVisible"
  },
  "api/BP.AdventureFramework.Commands.CustomCommandCallback.html": {
    "href": "api/BP.AdventureFramework.Commands.CustomCommandCallback.html",
    "title": "Delegate CustomCommandCallback | BP.AdventureFramework",
    "keywords": "Delegate CustomCommandCallback Provides a callback for custom commands. Namespace: BP.AdventureFramework.Commands Assembly: BP.AdventureFramework.dll Syntax public delegate Reaction CustomCommandCallback(Game game, string[] arguments) Parameters Type Name Description Game game The game to invoke the command on. string[] arguments The arguments to invoke the command with. Returns Type Description Reaction The reaction to the command."
  },
  "api/BP.AdventureFramework.Commands.ICommand.html": {
    "href": "api/BP.AdventureFramework.Commands.ICommand.html",
    "title": "Interface ICommand | BP.AdventureFramework",
    "keywords": "Interface ICommand Represents a command. Namespace: BP.AdventureFramework.Commands Assembly: BP.AdventureFramework.dll Syntax public interface ICommand Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction."
  },
  "api/BP.AdventureFramework.Commands.html": {
    "href": "api/BP.AdventureFramework.Commands.html",
    "title": "Namespace BP.AdventureFramework.Commands | BP.AdventureFramework",
    "keywords": "Namespace BP.AdventureFramework.Commands Classes CustomCommand Provides a custom command. Interfaces ICommand Represents a command. Delegates CustomCommandCallback Provides a callback for custom commands."
  },
  "api/BP.AdventureFramework.Conversations.Conversation.html": {
    "href": "api/BP.AdventureFramework.Conversations.Conversation.html",
    "title": "Class Conversation | BP.AdventureFramework",
    "keywords": "Class Conversation Represents a conversation. Inheritance object Conversation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Conversations Assembly: BP.AdventureFramework.dll Syntax public sealed class Conversation Constructors | Edit this page View Source Conversation(params Paragraph[]) Initializes a new instance of the Conversation class. Declaration public Conversation(params Paragraph[] paragraphs) Parameters Type Name Description Paragraph[] paragraphs The paragraphs. Properties | Edit this page View Source CurrentParagraph Get the current paragraph in the conversation. Declaration public Paragraph CurrentParagraph { get; } Property Value Type Description Paragraph | Edit this page View Source Log Get the log. Declaration public LogItem[] Log { get; } Property Value Type Description LogItem[] | Edit this page View Source Paragraphs Get the current paragraph in the conversation. Declaration public Paragraph[] Paragraphs { get; } Property Value Type Description Paragraph[] Methods | Edit this page View Source Next(Game) Trigger the next line in this conversation. Declaration public Reaction Next(Game game) Parameters Type Name Description Game game The game. Returns Type Description Reaction The reaction to the line. | Edit this page View Source Respond(Response, Game) Respond to the conversation. Declaration public Reaction Respond(Response response, Game game) Parameters Type Name Description Response response The response. Game game The game. Returns Type Description Reaction The reaction to the response."
  },
  "api/BP.AdventureFramework.Conversations.ConversationActionCallback.html": {
    "href": "api/BP.AdventureFramework.Conversations.ConversationActionCallback.html",
    "title": "Delegate ConversationActionCallback | BP.AdventureFramework",
    "keywords": "Delegate ConversationActionCallback Provides a callback that can be used in conversations invoking actions. Namespace: BP.AdventureFramework.Conversations Assembly: BP.AdventureFramework.dll Syntax public delegate void ConversationActionCallback(Game game) Parameters Type Name Description Game game The game to invoke the callback on."
  },
  "api/BP.AdventureFramework.Conversations.Instructions.ByCallback.html": {
    "href": "api/BP.AdventureFramework.Conversations.Instructions.ByCallback.html",
    "title": "Class ByCallback | BP.AdventureFramework",
    "keywords": "Class ByCallback An end of paragraph instruction that shifts paragraphs based on a callback. Inheritance object ByCallback Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Conversations.Instructions Assembly: BP.AdventureFramework.dll Syntax public sealed class ByCallback : IEndOfPargraphInstruction Constructors | Edit this page View Source ByCallback(Func<IEndOfPargraphInstruction>) Create a new instance of the ByCallback class. Declaration public ByCallback(Func<IEndOfPargraphInstruction> callback) Parameters Type Name Description Func<IEndOfPargraphInstruction> callback The callback that decides the instruction to use. Properties | Edit this page View Source Callback Get the callback that decides the instruction to use. Declaration public Func<IEndOfPargraphInstruction> Callback { get; } Property Value Type Description Func<IEndOfPargraphInstruction> Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/BP.AdventureFramework.Conversations.Instructions.First.html": {
    "href": "api/BP.AdventureFramework.Conversations.Instructions.First.html",
    "title": "Class First | BP.AdventureFramework",
    "keywords": "Class First An end of paragraph instruction that shifts paragraphs to the start. Inheritance object First Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Conversations.Instructions Assembly: BP.AdventureFramework.dll Syntax public sealed class First : IEndOfPargraphInstruction Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/BP.AdventureFramework.Conversations.Instructions.GoTo.html": {
    "href": "api/BP.AdventureFramework.Conversations.Instructions.GoTo.html",
    "title": "Class GoTo | BP.AdventureFramework",
    "keywords": "Class GoTo An end of paragraph instruction that shifts paragraphs based on an absolute index. Inheritance object GoTo Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Conversations.Instructions Assembly: BP.AdventureFramework.dll Syntax public sealed class GoTo : IEndOfPargraphInstruction Constructors | Edit this page View Source GoTo(int) Create a new instance of the GoTo class. Declaration public GoTo(int index) Parameters Type Name Description int index The index of the next paragraph. Properties | Edit this page View Source Index Get the index. Declaration public int Index { get; } Property Value Type Description int Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/BP.AdventureFramework.Conversations.Instructions.IEndOfPargraphInstruction.html": {
    "href": "api/BP.AdventureFramework.Conversations.Instructions.IEndOfPargraphInstruction.html",
    "title": "Interface IEndOfPargraphInstruction | BP.AdventureFramework",
    "keywords": "Interface IEndOfPargraphInstruction Represents an instructon to be carried out at the end of a paragraph. Namespace: BP.AdventureFramework.Conversations.Instructions Assembly: BP.AdventureFramework.dll Syntax public interface IEndOfPargraphInstruction Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph."
  },
  "api/BP.AdventureFramework.Conversations.Instructions.Jump.html": {
    "href": "api/BP.AdventureFramework.Conversations.Instructions.Jump.html",
    "title": "Class Jump | BP.AdventureFramework",
    "keywords": "Class Jump An end of paragraph instruction that shifts paragraphs based on a delta. Inheritance object Jump Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Conversations.Instructions Assembly: BP.AdventureFramework.dll Syntax public sealed class Jump : IEndOfPargraphInstruction Constructors | Edit this page View Source Jump(int) Create a new instance of the Jump class. Declaration public Jump(int delta) Parameters Type Name Description int delta The delta to shift paragraphs by. Properties | Edit this page View Source Delta Get the delta. Declaration public int Delta { get; } Property Value Type Description int Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/BP.AdventureFramework.Conversations.Instructions.Last.html": {
    "href": "api/BP.AdventureFramework.Conversations.Instructions.Last.html",
    "title": "Class Last | BP.AdventureFramework",
    "keywords": "Class Last An end of paragraph instruction that shifts paragraphs to the end. Inheritance object Last Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Conversations.Instructions Assembly: BP.AdventureFramework.dll Syntax public sealed class Last : IEndOfPargraphInstruction Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/BP.AdventureFramework.Conversations.Instructions.Next.html": {
    "href": "api/BP.AdventureFramework.Conversations.Instructions.Next.html",
    "title": "Class Next | BP.AdventureFramework",
    "keywords": "Class Next An end of paragraph instruction that shifts paragraphs to the next paragraph. Inheritance object Next Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Conversations.Instructions Assembly: BP.AdventureFramework.dll Syntax public sealed class Next : IEndOfPargraphInstruction Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/BP.AdventureFramework.Conversations.Instructions.Previous.html": {
    "href": "api/BP.AdventureFramework.Conversations.Instructions.Previous.html",
    "title": "Class Previous | BP.AdventureFramework",
    "keywords": "Class Previous An end of paragraph instruction that shifts paragraphs to the previous paragraph. Inheritance object Previous Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Conversations.Instructions Assembly: BP.AdventureFramework.dll Syntax public sealed class Previous : IEndOfPargraphInstruction Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/BP.AdventureFramework.Conversations.Instructions.Repeat.html": {
    "href": "api/BP.AdventureFramework.Conversations.Instructions.Repeat.html",
    "title": "Class Repeat | BP.AdventureFramework",
    "keywords": "Class Repeat An end of paragraph instruction that repeats. Inheritance object Repeat Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Conversations.Instructions Assembly: BP.AdventureFramework.dll Syntax public sealed class Repeat : IEndOfPargraphInstruction Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/BP.AdventureFramework.Conversations.Instructions.ToName.html": {
    "href": "api/BP.AdventureFramework.Conversations.Instructions.ToName.html",
    "title": "Class ToName | BP.AdventureFramework",
    "keywords": "Class ToName An end of paragraph instruction that shifts paragraphs based on a name. Inheritance object ToName Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Conversations.Instructions Assembly: BP.AdventureFramework.dll Syntax public sealed class ToName : IEndOfPargraphInstruction Constructors | Edit this page View Source ToName(string) Create a new instance of the ToName class. Declaration public ToName(string name) Parameters Type Name Description string name The name of the paragraph to jump to. Properties | Edit this page View Source Name Get the name of the paragraph to jump to. Declaration public string Name { get; } Property Value Type Description string Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/BP.AdventureFramework.Conversations.Instructions.html": {
    "href": "api/BP.AdventureFramework.Conversations.Instructions.html",
    "title": "Namespace BP.AdventureFramework.Conversations.Instructions | BP.AdventureFramework",
    "keywords": "Namespace BP.AdventureFramework.Conversations.Instructions Classes ByCallback An end of paragraph instruction that shifts paragraphs based on a callback. First An end of paragraph instruction that shifts paragraphs to the start. GoTo An end of paragraph instruction that shifts paragraphs based on an absolute index. Jump An end of paragraph instruction that shifts paragraphs based on a delta. Last An end of paragraph instruction that shifts paragraphs to the end. Next An end of paragraph instruction that shifts paragraphs to the next paragraph. Previous An end of paragraph instruction that shifts paragraphs to the previous paragraph. Repeat An end of paragraph instruction that repeats. ToName An end of paragraph instruction that shifts paragraphs based on a name. Interfaces IEndOfPargraphInstruction Represents an instructon to be carried out at the end of a paragraph."
  },
  "api/BP.AdventureFramework.Conversations.LogItem.html": {
    "href": "api/BP.AdventureFramework.Conversations.LogItem.html",
    "title": "Class LogItem | BP.AdventureFramework",
    "keywords": "Class LogItem Provides a container for log items. Inheritance object LogItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Conversations Assembly: BP.AdventureFramework.dll Syntax public sealed class LogItem Constructors | Edit this page View Source LogItem(Participant, string) Initializes a new instance of the LogItem class. Declaration public LogItem(Participant participant, string line) Parameters Type Name Description Participant participant The participant. string line The line. Properties | Edit this page View Source Line Get the line. Declaration public string Line { get; } Property Value Type Description string | Edit this page View Source Participant Get the participant. Declaration public Participant Participant { get; } Property Value Type Description Participant"
  },
  "api/BP.AdventureFramework.Conversations.Paragraph.html": {
    "href": "api/BP.AdventureFramework.Conversations.Paragraph.html",
    "title": "Class Paragraph | BP.AdventureFramework",
    "keywords": "Class Paragraph Represents a paragraph in a Conversation. Inheritance object Paragraph Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Conversations Assembly: BP.AdventureFramework.dll Syntax public sealed class Paragraph Constructors | Edit this page View Source Paragraph(string, ConversationActionCallback, IEndOfPargraphInstruction, string) Initializes a new instance of the Paragraph class. Declaration public Paragraph(string line, ConversationActionCallback action, IEndOfPargraphInstruction instruction, string name = \"\") Parameters Type Name Description string line Specify the line. ConversationActionCallback action Specify any action to be carried out with this line. IEndOfPargraphInstruction instruction Specify the end of paragraph instruction. This can be applied to a conversation to direct the conversation after this paragraph. string name Specify the name of the paragraph. | Edit this page View Source Paragraph(string, ConversationActionCallback, string) Initializes a new instance of the Paragraph class. Declaration public Paragraph(string line, ConversationActionCallback action, string name = \"\") Parameters Type Name Description string line Specify the line. ConversationActionCallback action Specify any action to be carried out with this line. string name Specify the name of the paragraph. | Edit this page View Source Paragraph(string, IEndOfPargraphInstruction, string) Initializes a new instance of the Paragraph class. Declaration public Paragraph(string line, IEndOfPargraphInstruction instruction, string name = \"\") Parameters Type Name Description string line Specify the line. IEndOfPargraphInstruction instruction Specify the end of paragraph instruction. This can be applied to a conversation to direct the conversation after this paragraph. string name Specify the name of the paragraph. | Edit this page View Source Paragraph(string, string) Initializes a new instance of the Paragraph class. Declaration public Paragraph(string line, string name = \"\") Parameters Type Name Description string line Specify the line. string name Specify the name of the paragraph. Properties | Edit this page View Source Action Get or set any action to carry out on this line. Declaration public ConversationActionCallback Action { get; set; } Property Value Type Description ConversationActionCallback | Edit this page View Source CanRespond Get if a response is possible. Declaration public bool CanRespond { get; } Property Value Type Description bool | Edit this page View Source Instruction Get the end of paragraph instruction. This can be applied to a conversation to direct the conversation after this paragraph. Declaration public IEndOfPargraphInstruction Instruction { get; } Property Value Type Description IEndOfPargraphInstruction | Edit this page View Source Line Get or set the line. Declaration public string Line { get; set; } Property Value Type Description string | Edit this page View Source Name Get the name. Declaration public string Name { get; } Property Value Type Description string | Edit this page View Source Responses Get or set the responses, applicable to the last line. Declaration public Response[] Responses { get; set; } Property Value Type Description Response[]"
  },
  "api/BP.AdventureFramework.Conversations.Participant.html": {
    "href": "api/BP.AdventureFramework.Conversations.Participant.html",
    "title": "Enum Participant | BP.AdventureFramework",
    "keywords": "Enum Participant Enumeration of participants in a conversation. Namespace: BP.AdventureFramework.Conversations Assembly: BP.AdventureFramework.dll Syntax public enum Participant Fields Name Description Other Any other participant. Player The player."
  },
  "api/BP.AdventureFramework.Conversations.Response.html": {
    "href": "api/BP.AdventureFramework.Conversations.Response.html",
    "title": "Class Response | BP.AdventureFramework",
    "keywords": "Class Response Provides a response to a conversation. Inheritance object Response Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Conversations Assembly: BP.AdventureFramework.dll Syntax public sealed class Response Constructors | Edit this page View Source Response(string) Initializes a new instance of the Response class. Declaration public Response(string line) Parameters Type Name Description string line The line to trigger this response. | Edit this page View Source Response(string, IEndOfPargraphInstruction) Initializes a new instance of the Response class. Declaration public Response(string line, IEndOfPargraphInstruction instruction) Parameters Type Name Description string line The line to trigger this response. IEndOfPargraphInstruction instruction Specify the end of paragraph instruction. This can be applied to a conversation to direct the conversation after this paragraph. Properties | Edit this page View Source Instruction Get the end of paragraph instruction. This can be applied to a conversation to direct the conversation after this paragraph. Declaration public IEndOfPargraphInstruction Instruction { get; } Property Value Type Description IEndOfPargraphInstruction | Edit this page View Source Line Get the line. Declaration public string Line { get; } Property Value Type Description string"
  },
  "api/BP.AdventureFramework.Conversations.html": {
    "href": "api/BP.AdventureFramework.Conversations.html",
    "title": "Namespace BP.AdventureFramework.Conversations | BP.AdventureFramework",
    "keywords": "Namespace BP.AdventureFramework.Conversations Classes Conversation Represents a conversation. LogItem Provides a container for log items. Paragraph Represents a paragraph in a Conversation. Response Provides a response to a conversation. Enums Participant Enumeration of participants in a conversation. Delegates ConversationActionCallback Provides a callback that can be used in conversations invoking actions."
  },
  "api/BP.AdventureFramework.Extensions.DirectionExtensions.html": {
    "href": "api/BP.AdventureFramework.Extensions.DirectionExtensions.html",
    "title": "Class DirectionExtensions | BP.AdventureFramework",
    "keywords": "Class DirectionExtensions Provides extension versions for Directions. Inheritance object DirectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Extensions Assembly: BP.AdventureFramework.dll Syntax public static class DirectionExtensions Methods | Edit this page View Source Inverse(Direction) Get an inverse direction. Declaration public static Direction Inverse(this Direction value) Parameters Type Name Description Direction value The direction. Returns Type Description Direction The inverse direction."
  },
  "api/BP.AdventureFramework.Extensions.StringExtensions.html": {
    "href": "api/BP.AdventureFramework.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | BP.AdventureFramework",
    "keywords": "Class StringExtensions Provides extension methods for strings. Inheritance object StringExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Extensions Assembly: BP.AdventureFramework.dll Syntax public static class StringExtensions Methods | Edit this page View Source CaseInsensitiveContains(string, string) Returns a value indicating whether a specified substring occurs within this string. This is not case sensitive. Declaration public static bool CaseInsensitiveContains(this string value, string subString) Parameters Type Name Description string value The value. string subString The string to seek. Returns Type Description bool True if the value parameter occurs within this string, or if value is the empty string (\"\"); otherwise, false. | Edit this page View Source EnsureFinishedSentence(string) Ensure this string is a finished sentence, ending in either ?, ! or . Declaration public static string EnsureFinishedSentence(this string value) Parameters Type Name Description string value The string to finish. Returns Type Description string The finished string. | Edit this page View Source EqualsExaminable(string, IExaminable) Determine if this string equals an IExaminable. Declaration public static bool EqualsExaminable(this string value, IExaminable examinable) Parameters Type Name Description string value The value. IExaminable examinable The examinable. Returns Type Description bool True if this string equals the identifier, else false. | Edit this page View Source EqualsIdentifier(string, Identifier) Determine if this string equals an identifier. Declaration public static bool EqualsIdentifier(this string value, Identifier identifier) Parameters Type Name Description string value The value. Identifier identifier The identifier. Returns Type Description bool True if this string equals the identifier, else false. | Edit this page View Source GetObjectifier(string) Get an objectifier for a word. Declaration public static string GetObjectifier(this string word) Parameters Type Name Description string word The word. Returns Type Description string The objectifier. | Edit this page View Source IsPlural(string) Get if a word is plural. Declaration public static bool IsPlural(this string word) Parameters Type Name Description string word The word to check. Returns Type Description bool True if the word is plural. | Edit this page View Source IsVowel(string) Get if a character is a vowel. Declaration public static bool IsVowel(this string value) Parameters Type Name Description string value The value to check. Returns Type Description bool True if the character is a vowel. | Edit this page View Source LineCount(string) Determine the number of lines in this string. Declaration public static int LineCount(this string value) Parameters Type Name Description string value The value. Returns Type Description int The number of lines in the string. | Edit this page View Source RemoveSentenceEnd(string) Ensure this string is not a finished sentence, ending in either ?, ! or . Declaration public static string RemoveSentenceEnd(this string value) Parameters Type Name Description string value The string to ensure isn't finished finish. Returns Type Description string The unfinished string. | Edit this page View Source ToDescription(string) Returns this string as a Description. Declaration public static Description ToDescription(this string value) Parameters Type Name Description string value The value. Returns Type Description Description This string as a description. | Edit this page View Source ToIdentifier(string) Returns this string as an Identifier. Declaration public static Identifier ToIdentifier(this string value) Parameters Type Name Description string value The value. Returns Type Description Identifier This string as an identifier. | Edit this page View Source ToSentenceCase(string) Convert a string to sentence case. Declaration public static string ToSentenceCase(this string value) Parameters Type Name Description string value The value. Returns Type Description string The word in sentence case. | Edit this page View Source ToSpeech(string) Convert a string to speech. Declaration public static string ToSpeech(this string value) Parameters Type Name Description string value The value. Returns Type Description string The value in sentence case."
  },
  "api/BP.AdventureFramework.Extensions.html": {
    "href": "api/BP.AdventureFramework.Extensions.html",
    "title": "Namespace BP.AdventureFramework.Extensions | BP.AdventureFramework",
    "keywords": "Namespace BP.AdventureFramework.Extensions Classes DirectionExtensions Provides extension versions for Directions. StringExtensions Provides extension methods for strings."
  },
  "api/BP.AdventureFramework.Interpretation.CommandHelp.html": {
    "href": "api/BP.AdventureFramework.Interpretation.CommandHelp.html",
    "title": "Class CommandHelp | BP.AdventureFramework",
    "keywords": "Class CommandHelp Provides help for a command. Inheritance object CommandHelp Implements IEquatable<CommandHelp> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Interpretation Assembly: BP.AdventureFramework.dll Syntax public sealed class CommandHelp : IEquatable<CommandHelp> Constructors | Edit this page View Source CommandHelp(string, string) Initializes a new instance of the CommandHelp class. Declaration public CommandHelp(string command, string description) Parameters Type Name Description string command The command. string description The help. Properties | Edit this page View Source Command Get the command. Declaration public string Command { get; } Property Value Type Description string | Edit this page View Source Description Get the description of the command. Declaration public string Description { get; } Property Value Type Description string Methods | Edit this page View Source Equals(CommandHelp) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(CommandHelp other) Parameters Type Name Description CommandHelp other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Implements IEquatable<T>"
  },
  "api/BP.AdventureFramework.Interpretation.CustomCommandInterpreter.html": {
    "href": "api/BP.AdventureFramework.Interpretation.CustomCommandInterpreter.html",
    "title": "Class CustomCommandInterpreter | BP.AdventureFramework",
    "keywords": "Class CustomCommandInterpreter Provides an object that can be used for interpreting custom commands. Inheritance object CustomCommandInterpreter Implements IInterpreter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Interpretation Assembly: BP.AdventureFramework.dll Syntax public class CustomCommandInterpreter : IInterpreter Properties | Edit this page View Source SupportedCommands Get an array of all supported commands. Declaration public CommandHelp[] SupportedCommands { get; } Property Value Type Description CommandHelp[] Methods | Edit this page View Source GetContextualCommandHelp(Game) Get contextual command help for a game, based on its current state. Declaration public CommandHelp[] GetContextualCommandHelp(Game game) Parameters Type Name Description Game game The game. Returns Type Description CommandHelp[] The contextual help. | Edit this page View Source Interpret(string, Game) Interpret a string. Declaration public InterpretationResult Interpret(string input, Game game) Parameters Type Name Description string input The string to interpret. Game game The game. Returns Type Description InterpretationResult The result of the interpretation. Implements IInterpreter"
  },
  "api/BP.AdventureFramework.Interpretation.IInterpreter.html": {
    "href": "api/BP.AdventureFramework.Interpretation.IInterpreter.html",
    "title": "Interface IInterpreter | BP.AdventureFramework",
    "keywords": "Interface IInterpreter Represents any object that can act as an interpreter for input. Namespace: BP.AdventureFramework.Interpretation Assembly: BP.AdventureFramework.dll Syntax public interface IInterpreter Properties | Edit this page View Source SupportedCommands Get an array of all supported commands. Declaration CommandHelp[] SupportedCommands { get; } Property Value Type Description CommandHelp[] Methods | Edit this page View Source GetContextualCommandHelp(Game) Get contextual command help for a game, based on its current state. Declaration CommandHelp[] GetContextualCommandHelp(Game game) Parameters Type Name Description Game game The game. Returns Type Description CommandHelp[] The contextual help. | Edit this page View Source Interpret(string, Game) Interpret a string. Declaration InterpretationResult Interpret(string input, Game game) Parameters Type Name Description string input The string to interpret. Game game The game. Returns Type Description InterpretationResult The result of the interpretation."
  },
  "api/BP.AdventureFramework.Interpretation.InterpretationResult.html": {
    "href": "api/BP.AdventureFramework.Interpretation.InterpretationResult.html",
    "title": "Class InterpretationResult | BP.AdventureFramework",
    "keywords": "Class InterpretationResult Represents the result of an interpretation. Inheritance object InterpretationResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Interpretation Assembly: BP.AdventureFramework.dll Syntax public class InterpretationResult Constructors | Edit this page View Source InterpretationResult(bool, ICommand) Initializes a new instance of the InterpretationResult class. Declaration public InterpretationResult(bool wasInterpretedSuccessfully, ICommand command) Parameters Type Name Description bool wasInterpretedSuccessfully If interpretation was successful. ICommand command The command. Properties | Edit this page View Source Command Get the command. Declaration public ICommand Command { get; } Property Value Type Description ICommand | Edit this page View Source Fail Get a default result for failure. Declaration public static InterpretationResult Fail { get; } Property Value Type Description InterpretationResult | Edit this page View Source WasInterpretedSuccessfully Get if interpretation was successful. Declaration public bool WasInterpretedSuccessfully { get; } Property Value Type Description bool"
  },
  "api/BP.AdventureFramework.Interpretation.html": {
    "href": "api/BP.AdventureFramework.Interpretation.html",
    "title": "Namespace BP.AdventureFramework.Interpretation | BP.AdventureFramework",
    "keywords": "Namespace BP.AdventureFramework.Interpretation Classes CommandHelp Provides help for a command. CustomCommandInterpreter Provides an object that can be used for interpreting custom commands. InterpretationResult Represents the result of an interpretation. Interfaces IInterpreter Represents any object that can act as an interpreter for input."
  },
  "api/BP.AdventureFramework.Logic.EndCheck.html": {
    "href": "api/BP.AdventureFramework.Logic.EndCheck.html",
    "title": "Delegate EndCheck | BP.AdventureFramework",
    "keywords": "Delegate EndCheck Represents the callback used for end checks. Namespace: BP.AdventureFramework.Logic Assembly: BP.AdventureFramework.dll Syntax public delegate EndCheckResult EndCheck(Game game) Parameters Type Name Description Game game The game to check for end. Returns Type Description EndCheckResult Returns a result from the check."
  },
  "api/BP.AdventureFramework.Logic.EndCheckResult.html": {
    "href": "api/BP.AdventureFramework.Logic.EndCheckResult.html",
    "title": "Class EndCheckResult | BP.AdventureFramework",
    "keywords": "Class EndCheckResult Represents the result of an end check. Inheritance object EndCheckResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Logic Assembly: BP.AdventureFramework.dll Syntax public class EndCheckResult Constructors | Edit this page View Source EndCheckResult(bool, string, string) Initializes a new instance of the EndCheckResult class. Declaration public EndCheckResult(bool isCompleted, string title, string description) Parameters Type Name Description bool isCompleted If the game has ended. string title A title to describe the end. string description A description of the end. Properties | Edit this page View Source Description Get a description of the end. Declaration public string Description { get; } Property Value Type Description string | Edit this page View Source HasEnded Get if the game has come to an end. Declaration public bool HasEnded { get; } Property Value Type Description bool | Edit this page View Source NotEnded Get a default result for not ended. Declaration public static EndCheckResult NotEnded { get; } Property Value Type Description EndCheckResult | Edit this page View Source Title Get a title to describe the end. Declaration public string Title { get; } Property Value Type Description string"
  },
  "api/BP.AdventureFramework.Logic.ExitMode.html": {
    "href": "api/BP.AdventureFramework.Logic.ExitMode.html",
    "title": "Enum ExitMode | BP.AdventureFramework",
    "keywords": "Enum ExitMode Enumeration of exit modes. Namespace: BP.AdventureFramework.Logic Assembly: BP.AdventureFramework.dll Syntax public enum ExitMode Fields Name Description ExitApplication Exit the application. ReturnToTitleScreen Return to the title screen."
  },
  "api/BP.AdventureFramework.Logic.Game.html": {
    "href": "api/BP.AdventureFramework.Logic.Game.html",
    "title": "Class Game | BP.AdventureFramework",
    "keywords": "Class Game Represents the structure of the game Inheritance object Game Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Logic Assembly: BP.AdventureFramework.dll Syntax public sealed class Game Fields | Edit this page View Source DefaultErrorPrefix Get the default error prefix. Declaration public const string DefaultErrorPrefix = \"Oops\" Field Value Type Description string Properties | Edit this page View Source ActiveConverser Get the active converser. Declaration public IConverser ActiveConverser { get; } Property Value Type Description IConverser | Edit this page View Source Author Get or set the name of the author. Declaration public string Author { get; set; } Property Value Type Description string | Edit this page View Source DefaultInterpreter Get the default interpreter. Declaration public static IInterpreter DefaultInterpreter { get; } Property Value Type Description IInterpreter | Edit this page View Source DefaultSize Get the default size. Declaration public static Size DefaultSize { get; } Property Value Type Description Size | Edit this page View Source Description Get the description. Declaration public string Description { get; } Property Value Type Description string | Edit this page View Source DisplayCommandListInSceneFrames Get or set if the command list is displayed in scene frames. Declaration public bool DisplayCommandListInSceneFrames { get; set; } Property Value Type Description bool | Edit this page View Source DisplaySize Get the size of the display area. Declaration public Size DisplaySize { get; } Property Value Type Description Size | Edit this page View Source ErrorPrefix Get or set the error prefix. Declaration public string ErrorPrefix { get; set; } Property Value Type Description string | Edit this page View Source FrameBuilders Get or set the collection of frame builders used to render this game. Declaration public FrameBuilderCollection FrameBuilders { get; set; } Property Value Type Description FrameBuilderCollection | Edit this page View Source Introduction Get the introduction. Declaration public string Introduction { get; } Property Value Type Description string | Edit this page View Source IsExecuting Get if this is executing. Declaration public bool IsExecuting { get; } Property Value Type Description bool | Edit this page View Source Name Get the name. Declaration public string Name { get; } Property Value Type Description string | Edit this page View Source Overworld Get the overworld. Declaration public Overworld Overworld { get; } Property Value Type Description Overworld | Edit this page View Source Player Get the player. Declaration public PlayableCharacter Player { get; } Property Value Type Description PlayableCharacter | Edit this page View Source SceneMapKeyType Get or set the type of key to use on the scene map. Declaration public KeyType SceneMapKeyType { get; set; } Property Value Type Description KeyType Methods | Edit this page View Source Create(string, string, string, OverworldCreationCallback, PlayerCreationCallback, EndCheck, EndCheck) Create a new callback for generating instances of a game. Declaration public static GameCreationCallback Create(string name, string introduction, string description, OverworldCreationCallback overworldGenerator, PlayerCreationCallback playerGenerator, EndCheck completionCondition, EndCheck gameOverCondition) Parameters Type Name Description string name The name of the game. string introduction An introduction to the game. string description A description of the game. OverworldCreationCallback overworldGenerator A function to generate the overworld with. PlayerCreationCallback playerGenerator The function to generate the player with. EndCheck completionCondition The callback used to check game completion. EndCheck gameOverCondition The callback used to check game over. Returns Type Description GameCreationCallback A new GameCreationHelper that will create a GameCreator with the parameters specified. | Edit this page View Source Create(string, string, string, OverworldCreationCallback, PlayerCreationCallback, EndCheck, EndCheck, Size, FrameBuilderCollection, ExitMode, string, IInterpreter) Create a new callback for generating instances of a game. Declaration public static GameCreationCallback Create(string name, string introduction, string description, OverworldCreationCallback overworldGenerator, PlayerCreationCallback playerGenerator, EndCheck completionCondition, EndCheck gameOverCondition, Size displaySize, FrameBuilderCollection frameBuilders, ExitMode exitMode, string errorPrefix, IInterpreter interpreter) Parameters Type Name Description string name The name of the game. string introduction An introduction to the game. string description A description of the game. OverworldCreationCallback overworldGenerator A function to generate the overworld with. PlayerCreationCallback playerGenerator The function to generate the player with. EndCheck completionCondition The callback used to check game completion. EndCheck gameOverCondition The callback used to check game over. Size displaySize The display size. FrameBuilderCollection frameBuilders The collection of frame builders to use to render the game. ExitMode exitMode The exit mode. string errorPrefix A prefix to use when displaying errors. IInterpreter interpreter The interpreter. Returns Type Description GameCreationCallback A new GameCreationHelper that will create a GameCreator with the parameters specified. | Edit this page View Source DisplayAbout() Display the about frame. Declaration public void DisplayAbout() | Edit this page View Source DisplayHelp() Display the help frame. Declaration public void DisplayHelp() | Edit this page View Source DisplayMap() Display the map frame. Declaration public void DisplayMap() | Edit this page View Source DisplayTransition(string, string) Display a transition frame. Declaration public void DisplayTransition(string title, string message) Parameters Type Name Description string title The title. string message The message. | Edit this page View Source Execute(GameCreationCallback) Execute a game. Declaration public static void Execute(GameCreationCallback creator) Parameters Type Name Description GameCreationCallback creator The creator to use to create the game. | Edit this page View Source FindInteractionTarget(string) Find an interaction target within the current scope for this Game. Declaration public IInteractWithItem FindInteractionTarget(string name) Parameters Type Name Description string name The targets name. Returns Type Description IInteractWithItem The first IInteractWithItem object which has a name that matches the name parameter. | Edit this page View Source GetAllPlayerVisibleExaminables() Get all examinables that are currently visible to the player. Declaration public IExaminable[] GetAllPlayerVisibleExaminables() Returns Type Description IExaminable[] An array of all examinables that are currently visible to the player."
  },
  "api/BP.AdventureFramework.Logic.GameCreationCallback.html": {
    "href": "api/BP.AdventureFramework.Logic.GameCreationCallback.html",
    "title": "Delegate GameCreationCallback | BP.AdventureFramework",
    "keywords": "Delegate GameCreationCallback Represents the callback used for Game creation. Namespace: BP.AdventureFramework.Logic Assembly: BP.AdventureFramework.dll Syntax public delegate Game GameCreationCallback() Returns Type Description Game A game created by the callback."
  },
  "api/BP.AdventureFramework.Logic.GameState.html": {
    "href": "api/BP.AdventureFramework.Logic.GameState.html",
    "title": "Enum GameState | BP.AdventureFramework",
    "keywords": "Enum GameState Enumeration of game states. Namespace: BP.AdventureFramework.Logic Assembly: BP.AdventureFramework.dll Syntax public enum GameState Fields Name Description Active Active. Finished Finished. NotStarted Not started."
  },
  "api/BP.AdventureFramework.Logic.OverworldCreationCallback.html": {
    "href": "api/BP.AdventureFramework.Logic.OverworldCreationCallback.html",
    "title": "Delegate OverworldCreationCallback | BP.AdventureFramework",
    "keywords": "Delegate OverworldCreationCallback Represents a callback for Overworld creation. Namespace: BP.AdventureFramework.Logic Assembly: BP.AdventureFramework.dll Syntax public delegate Overworld OverworldCreationCallback(PlayableCharacter pC) Parameters Type Name Description PlayableCharacter pC The playable character that will appear in the Overworld. Returns Type Description Overworld A generated Overworld."
  },
  "api/BP.AdventureFramework.Logic.PlayerCreationCallback.html": {
    "href": "api/BP.AdventureFramework.Logic.PlayerCreationCallback.html",
    "title": "Delegate PlayerCreationCallback | BP.AdventureFramework",
    "keywords": "Delegate PlayerCreationCallback Represents a callback for Player creation. Namespace: BP.AdventureFramework.Logic Assembly: BP.AdventureFramework.dll Syntax public delegate PlayableCharacter PlayerCreationCallback() Returns Type Description PlayableCharacter A generated Player."
  },
  "api/BP.AdventureFramework.Logic.html": {
    "href": "api/BP.AdventureFramework.Logic.html",
    "title": "Namespace BP.AdventureFramework.Logic | BP.AdventureFramework",
    "keywords": "Namespace BP.AdventureFramework.Logic Classes EndCheckResult Represents the result of an end check. Game Represents the structure of the game Enums ExitMode Enumeration of exit modes. GameState Enumeration of game states. Delegates EndCheck Represents the callback used for end checks. GameCreationCallback Represents the callback used for Game creation. OverworldCreationCallback Represents a callback for Overworld creation. PlayerCreationCallback Represents a callback for Player creation."
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.AnsiColor.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.AnsiColor.html",
    "title": "Enum AnsiColor | BP.AdventureFramework",
    "keywords": "Enum AnsiColor Enumeration of ANSI colors. Namespace: BP.AdventureFramework.Rendering.FrameBuilders.Color Assembly: BP.AdventureFramework.dll Syntax public enum AnsiColor Fields Name Description Black Black (30). Blue Blue (34). BrightBlack Bright black (90). BrightBlue Bright blue (94). BrightCyan Bright cyan (96). BrightGreen Bright green (92). BrightMagenta Bright magenta (95). BrightRed Bright red (91). BrightWhite Bright white (97). BrightYellow Bright yellow (93). Cyan Cyan (36). Green Green (32). Magenta Magenta (35). Red Red (31). Reset Reset (0). White White (37). Yellow Yellow (33)."
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorAboutFrameBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorAboutFrameBuilder.html",
    "title": "Class ColorAboutFrameBuilder | BP.AdventureFramework",
    "keywords": "Class ColorAboutFrameBuilder Provides a builder of color about frames. Inheritance object ColorAboutFrameBuilder Implements IAboutFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Rendering.FrameBuilders.Color Assembly: BP.AdventureFramework.dll Syntax public sealed class ColorAboutFrameBuilder : IAboutFrameBuilder Constructors | Edit this page View Source ColorAboutFrameBuilder(GridStringBuilder) Initializes a new instance of the ColorAboutFrameBuilder class. Declaration public ColorAboutFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties | Edit this page View Source AuthorColor Get or set the author color. Declaration public AnsiColor AuthorColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source DescriptionColor Get or set the description color. Declaration public AnsiColor DescriptionColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source NameColor Get or set the name color. Declaration public AnsiColor NameColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source Build(string, Game, int, int) Build a frame. Declaration public IFrame Build(string title, Game game, int width, int height) Parameters Type Name Description string title The title. Game game The game. int width The width of the frame. int height The height of the frame. Returns Type Description IFrame Implements IAboutFrameBuilder"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorCompletionFrameBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorCompletionFrameBuilder.html",
    "title": "Class ColorCompletionFrameBuilder | BP.AdventureFramework",
    "keywords": "Class ColorCompletionFrameBuilder Provides a builder of color completion frames. Inheritance object ColorCompletionFrameBuilder Implements ICompletionFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Rendering.FrameBuilders.Color Assembly: BP.AdventureFramework.dll Syntax public sealed class ColorCompletionFrameBuilder : ICompletionFrameBuilder Constructors | Edit this page View Source ColorCompletionFrameBuilder(GridStringBuilder) Initializes a new instance of the ColorCompletionFrameBuilder class. Declaration public ColorCompletionFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties | Edit this page View Source BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source DescriptionColor Get or set the description color. Declaration public AnsiColor DescriptionColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source Build(string, string, int, int) Build a frame. Declaration public IFrame Build(string message, string reason, int width, int height) Parameters Type Name Description string message The message to display to the user. string reason The reason the game ended. int width The width of the frame. int height The height of the frame. Returns Type Description IFrame Implements ICompletionFrameBuilder"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorConversationFrameBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorConversationFrameBuilder.html",
    "title": "Class ColorConversationFrameBuilder | BP.AdventureFramework",
    "keywords": "Class ColorConversationFrameBuilder Provides a builder of color conversation frames. Inheritance object ColorConversationFrameBuilder Implements IConversationFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Rendering.FrameBuilders.Color Assembly: BP.AdventureFramework.dll Syntax public sealed class ColorConversationFrameBuilder : IConversationFrameBuilder Constructors | Edit this page View Source ColorConversationFrameBuilder(GridStringBuilder) Initializes a new instance of the ColorConversationFrameBuilder class. Declaration public ColorConversationFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties | Edit this page View Source BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source InputColor Get or set the input color. Declaration public AnsiColor InputColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source NonPlayerMessageColor Get or set the player message color. Declaration public AnsiColor NonPlayerMessageColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source PlayerMessageColor Get or set the player message color. Declaration public AnsiColor PlayerMessageColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source ResponseColor Get or set the response color. Declaration public AnsiColor ResponseColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source Build(string, IConverser, CommandHelp[], int, int) Build a frame. Declaration public IFrame Build(string title, IConverser converser, CommandHelp[] contextualCommands, int width, int height) Parameters Type Name Description string title The title to display to the user. IConverser converser The converser. CommandHelp[] contextualCommands The contextual commands to display. int width The width of the frame. int height The height of the frame. Returns Type Description IFrame Implements IConversationFrameBuilder"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorGameOverFrameBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorGameOverFrameBuilder.html",
    "title": "Class ColorGameOverFrameBuilder | BP.AdventureFramework",
    "keywords": "Class ColorGameOverFrameBuilder Provides a builder of color game over frames. Inheritance object ColorGameOverFrameBuilder Implements IGameOverFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Rendering.FrameBuilders.Color Assembly: BP.AdventureFramework.dll Syntax public sealed class ColorGameOverFrameBuilder : IGameOverFrameBuilder Constructors | Edit this page View Source ColorGameOverFrameBuilder(GridStringBuilder) Initializes a new instance of the ColorGameOverFrameBuilder class. Declaration public ColorGameOverFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties | Edit this page View Source BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source DescriptionColor Get or set the description color. Declaration public AnsiColor DescriptionColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source Build(string, string, int, int) Build a frame. Declaration public IFrame Build(string message, string reason, int width, int height) Parameters Type Name Description string message The message to display to the user. string reason The reason the game ended. int width The width of the frame. int height The height of the frame. Returns Type Description IFrame Implements IGameOverFrameBuilder"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorHelpFrameBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorHelpFrameBuilder.html",
    "title": "Class ColorHelpFrameBuilder | BP.AdventureFramework",
    "keywords": "Class ColorHelpFrameBuilder Provides a builder of color help frames. Inheritance object ColorHelpFrameBuilder Implements IHelpFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Rendering.FrameBuilders.Color Assembly: BP.AdventureFramework.dll Syntax public sealed class ColorHelpFrameBuilder : IHelpFrameBuilder Constructors | Edit this page View Source ColorHelpFrameBuilder(GridStringBuilder) Initializes a new instance of the ColorHelpFrameBuilder class. Declaration public ColorHelpFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties | Edit this page View Source BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source CommandColor Get or set the command color. Declaration public AnsiColor CommandColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source CommandDescriptionColor Get or set the description color. Declaration public AnsiColor CommandDescriptionColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source DescriptionColor Get or set the description color. Declaration public AnsiColor DescriptionColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source Build(string, string, CommandHelp[], int, int) Build a frame. Declaration public IFrame Build(string title, string description, CommandHelp[] commandHelp, int width, int height) Parameters Type Name Description string title The title. string description The description. CommandHelp[] commandHelp The command help. int width The width of the frame. int height The height of the frame. Returns Type Description IFrame Implements IHelpFrameBuilder"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorRegionMapBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorRegionMapBuilder.html",
    "title": "Class ColorRegionMapBuilder | BP.AdventureFramework",
    "keywords": "Class ColorRegionMapBuilder Provides a color builder for region maps. Inheritance object ColorRegionMapBuilder Implements IRegionMapBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Rendering.FrameBuilders.Color Assembly: BP.AdventureFramework.dll Syntax public sealed class ColorRegionMapBuilder : IRegionMapBuilder Properties | Edit this page View Source CurrentFloorIndicator Get or set the character to use for the current floor. Declaration public char CurrentFloorIndicator { get; set; } Property Value Type Description char | Edit this page View Source EmptySpace Get or set the character used for representing an empty space. Declaration public char EmptySpace { get; set; } Property Value Type Description char | Edit this page View Source HorizontalBoundary Get or set the character to use for horizontal boundaries. Declaration public char HorizontalBoundary { get; set; } Property Value Type Description char | Edit this page View Source LockedExit Get or set the character used for representing a locked exit. Declaration public char LockedExit { get; set; } Property Value Type Description char | Edit this page View Source LockedExitColor Get or set the locked exit color. Declaration public AnsiColor LockedExitColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source LowerLevel Get or set the character to use for lower levels. Declaration public char LowerLevel { get; set; } Property Value Type Description char | Edit this page View Source LowerLevelColor Get or set the lower level color. Declaration public AnsiColor LowerLevelColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source Player Get or set the character to use for indicating the player. Declaration public char Player { get; set; } Property Value Type Description char | Edit this page View Source PlayerColor Get or set the player color. Declaration public AnsiColor PlayerColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source ShowLowerFloors Get or set if lower floors should be shown. Declaration public bool ShowLowerFloors { get; set; } Property Value Type Description bool | Edit this page View Source UnLockedExit Get or set the character used for representing an unlocked exit. Declaration public char UnLockedExit { get; set; } Property Value Type Description char | Edit this page View Source UnvisitedBoundaryColor Get or set the unvisited room boundary color. Declaration public AnsiColor UnvisitedBoundaryColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source VerticalBoundary Get or set the character to use for vertical boundaries. Declaration public char VerticalBoundary { get; set; } Property Value Type Description char | Edit this page View Source VisitedBoundaryColor Get or set the visited room boundary color. Declaration public AnsiColor VisitedBoundaryColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source BuildRegionMap(GridStringBuilder, Region, int, int, int, int) Build a map of a region. Declaration public void BuildRegionMap(GridStringBuilder gridStringBuilder, Region region, int x, int y, int maxWidth, int maxHeight) Parameters Type Name Description GridStringBuilder gridStringBuilder The string builder to use. Region region The region. int x The x position to start building at. int y The y position to start building at. int maxWidth The maximum horizontal space available in which to build the map. int maxHeight The maximum vertical space available in which to build the map. Implements IRegionMapBuilder"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorRegionMapFrameBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorRegionMapFrameBuilder.html",
    "title": "Class ColorRegionMapFrameBuilder | BP.AdventureFramework",
    "keywords": "Class ColorRegionMapFrameBuilder Provides a builder of color region map frames. Inheritance object ColorRegionMapFrameBuilder Implements IRegionMapFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Rendering.FrameBuilders.Color Assembly: BP.AdventureFramework.dll Syntax public sealed class ColorRegionMapFrameBuilder : IRegionMapFrameBuilder Constructors | Edit this page View Source ColorRegionMapFrameBuilder(GridStringBuilder, IRegionMapBuilder) Initializes a new instance of the ColorRegionMapFrameBuilder class. Declaration public ColorRegionMapFrameBuilder(GridStringBuilder gridStringBuilder, IRegionMapBuilder regionMapBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. IRegionMapBuilder regionMapBuilder A builder for region maps. Properties | Edit this page View Source BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source Build(Region, int, int) Build a frame. Declaration public IFrame Build(Region region, int width, int height) Parameters Type Name Description Region region The region. int width The width of the frame. int height The height of the frame. Returns Type Description IFrame Implements IRegionMapFrameBuilder"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorRoomMapBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorRoomMapBuilder.html",
    "title": "Class ColorRoomMapBuilder | BP.AdventureFramework",
    "keywords": "Class ColorRoomMapBuilder Provides a color room map builder. Inheritance object ColorRoomMapBuilder Implements IRoomMapBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Rendering.FrameBuilders.Color Assembly: BP.AdventureFramework.dll Syntax public sealed class ColorRoomMapBuilder : IRoomMapBuilder Properties | Edit this page View Source BoundaryColor Get or set the room boundary color. Declaration public AnsiColor BoundaryColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source Corner Get or set the character to use for corners. Declaration public char Corner { get; set; } Property Value Type Description char | Edit this page View Source HorizontalBoundary Get or set the character to use for horizontal boundaries. Declaration public char HorizontalBoundary { get; set; } Property Value Type Description char | Edit this page View Source HorizontalExitBorder Get or set the character to use for horizontal exit borders. Declaration public char HorizontalExitBorder { get; set; } Property Value Type Description char | Edit this page View Source ItemOrCharacterColor Get or set the item or character color. Declaration public AnsiColor ItemOrCharacterColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source ItemOrCharacterInRoom Get or set the character used for representing there is an item or a character in the room. Declaration public char ItemOrCharacterInRoom { get; set; } Property Value Type Description char | Edit this page View Source KeyPadding Get or set the padding between the key and the map. Declaration public int KeyPadding { get; set; } Property Value Type Description int | Edit this page View Source LockedExit Get or set the character used for representing a locked exit. Declaration public char LockedExit { get; set; } Property Value Type Description char | Edit this page View Source LockedExitColor Get or set the locked exit color. Declaration public AnsiColor LockedExitColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source UnvisitedExitColor Get or set the unvisited exit color. Declaration public AnsiColor UnvisitedExitColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source VerticalBoundary Get or set the character to use for vertical boundaries. Declaration public char VerticalBoundary { get; set; } Property Value Type Description char | Edit this page View Source VerticalExitBorder Get or set the character to use for vertical exit borders. Declaration public char VerticalExitBorder { get; set; } Property Value Type Description char | Edit this page View Source VisitedExitColor Get or set the visited exit color. Declaration public AnsiColor VisitedExitColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source BuildRoomMap(GridStringBuilder, Room, ViewPoint, KeyType, int, int, out int, out int) Build a map for a room. Declaration public void BuildRoomMap(GridStringBuilder gridStringBuilder, Room room, ViewPoint viewPoint, KeyType key, int startX, int startY, out int endX, out int endY) Parameters Type Name Description GridStringBuilder gridStringBuilder The string builder to use. Room room The room. ViewPoint viewPoint The viewpoint from the room. KeyType key The key type. int startX The start position, x. int startY The start position, x. int endX The end position, x. int endY The end position, x. Implements IRoomMapBuilder"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorSceneFrameBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorSceneFrameBuilder.html",
    "title": "Class ColorSceneFrameBuilder | BP.AdventureFramework",
    "keywords": "Class ColorSceneFrameBuilder Provides a builder for color scene frames. Inheritance object ColorSceneFrameBuilder Implements ISceneFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Rendering.FrameBuilders.Color Assembly: BP.AdventureFramework.dll Syntax public sealed class ColorSceneFrameBuilder : ISceneFrameBuilder Constructors | Edit this page View Source ColorSceneFrameBuilder(GridStringBuilder, IRoomMapBuilder) Initializes a new instance of the ColorSceneFrameBuilder class. Declaration public ColorSceneFrameBuilder(GridStringBuilder gridStringBuilder, IRoomMapBuilder roomMapBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. IRoomMapBuilder roomMapBuilder A builder to use for room maps. Properties | Edit this page View Source BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source CommandsColor Get or set the commands color. Declaration public AnsiColor CommandsColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source DisplayMessagesInIsolation Get or set if messages should be displayed in isolation. Declaration public bool DisplayMessagesInIsolation { get; set; } Property Value Type Description bool | Edit this page View Source InputColor Get or set the input color. Declaration public AnsiColor InputColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source SupressMovementMessages Get or set if movement messages should be suppressed. Declaration public bool SupressMovementMessages { get; set; } Property Value Type Description bool | Edit this page View Source TextColor Get or set the text color. Declaration public AnsiColor TextColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source Build(Room, ViewPoint, PlayableCharacter, string, CommandHelp[], KeyType, int, int) Build a frame. Declaration public IFrame Build(Room room, ViewPoint viewPoint, PlayableCharacter player, string message, CommandHelp[] contextualCommands, KeyType keyType, int width, int height) Parameters Type Name Description Room room Specify the Room. ViewPoint viewPoint Specify the viewpoint from the room. PlayableCharacter player Specify the player. string message Any additional message. CommandHelp[] contextualCommands The contextual commands to display. KeyType keyType The type of key to use. int width The width of the frame. int height The height of the frame. Returns Type Description IFrame Implements ISceneFrameBuilder"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorTitleFrameBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorTitleFrameBuilder.html",
    "title": "Class ColorTitleFrameBuilder | BP.AdventureFramework",
    "keywords": "Class ColorTitleFrameBuilder Provides a builder of color title frames. Inheritance object ColorTitleFrameBuilder Implements ITitleFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Rendering.FrameBuilders.Color Assembly: BP.AdventureFramework.dll Syntax public sealed class ColorTitleFrameBuilder : ITitleFrameBuilder Constructors | Edit this page View Source ColorTitleFrameBuilder(GridStringBuilder) Initializes a new instance of the ColorTitleFrameBuilder class. Declaration public ColorTitleFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties | Edit this page View Source BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source DescriptionColor Get or set the description color. Declaration public AnsiColor DescriptionColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source Build(string, string, int, int) Build a frame. Declaration public IFrame Build(string title, string description, int width, int height) Parameters Type Name Description string title The title. string description The description. int width The width of the frame. int height The height of the frame. Returns Type Description IFrame Implements ITitleFrameBuilder"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorTransitionFrameBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.ColorTransitionFrameBuilder.html",
    "title": "Class ColorTransitionFrameBuilder | BP.AdventureFramework",
    "keywords": "Class ColorTransitionFrameBuilder Provides a builder of color transition frames. Inheritance object ColorTransitionFrameBuilder Implements ITransitionFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Rendering.FrameBuilders.Color Assembly: BP.AdventureFramework.dll Syntax public sealed class ColorTransitionFrameBuilder : ITransitionFrameBuilder Constructors | Edit this page View Source ColorTransitionFrameBuilder(GridStringBuilder) Initializes a new instance of the ColorTransitionFrameBuilder class. Declaration public ColorTransitionFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties | Edit this page View Source BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source MessageColor Get or set the message color. Declaration public AnsiColor MessageColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source Build(string, string, int, int) Build a frame. Declaration public IFrame Build(string title, string message, int width, int height) Parameters Type Name Description string title The title to display to the user. string message The message to display to the user. int width The width of the frame. int height The height of the frame. Returns Type Description IFrame Implements ITransitionFrameBuilder"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.Color.html",
    "title": "Namespace BP.AdventureFramework.Rendering.FrameBuilders.Color | BP.AdventureFramework",
    "keywords": "Namespace BP.AdventureFramework.Rendering.FrameBuilders.Color Classes ColorAboutFrameBuilder Provides a builder of color about frames. ColorCompletionFrameBuilder Provides a builder of color completion frames. ColorConversationFrameBuilder Provides a builder of color conversation frames. ColorGameOverFrameBuilder Provides a builder of color game over frames. ColorHelpFrameBuilder Provides a builder of color help frames. ColorRegionMapBuilder Provides a color builder for region maps. ColorRegionMapFrameBuilder Provides a builder of color region map frames. ColorRoomMapBuilder Provides a color room map builder. ColorSceneFrameBuilder Provides a builder for color scene frames. ColorTitleFrameBuilder Provides a builder of color title frames. ColorTransitionFrameBuilder Provides a builder of color transition frames. Enums AnsiColor Enumeration of ANSI colors."
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.FrameBuilderCollection.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.FrameBuilderCollection.html",
    "title": "Class FrameBuilderCollection | BP.AdventureFramework",
    "keywords": "Class FrameBuilderCollection Provides a collection of all of the frame builders required to run a game. Inheritance object FrameBuilderCollection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Rendering.FrameBuilders Assembly: BP.AdventureFramework.dll Syntax public class FrameBuilderCollection Constructors | Edit this page View Source FrameBuilderCollection(ITitleFrameBuilder, ISceneFrameBuilder, IRegionMapFrameBuilder, IHelpFrameBuilder, ICompletionFrameBuilder, IGameOverFrameBuilder, IAboutFrameBuilder, ITransitionFrameBuilder, IConversationFrameBuilder) Initializes a new instance of the FrameBuilderCollection class. Declaration public FrameBuilderCollection(ITitleFrameBuilder titleFrameBuilder, ISceneFrameBuilder sceneFrameBuilder, IRegionMapFrameBuilder regionMapFrameBuilder, IHelpFrameBuilder helpFrameBuilder, ICompletionFrameBuilder completionFrameBuilder, IGameOverFrameBuilder gameOverFrameBuilder, IAboutFrameBuilder aboutFrameBuilder, ITransitionFrameBuilder transitionFrameBuilder, IConversationFrameBuilder conversationFrameBuilder) Parameters Type Name Description ITitleFrameBuilder titleFrameBuilder The builder to use for building title frames. ISceneFrameBuilder sceneFrameBuilder The builder to use for building scene frames. IRegionMapFrameBuilder regionMapFrameBuilder The builder to use for building region map frames. IHelpFrameBuilder helpFrameBuilder The builder to use for building help frames. ICompletionFrameBuilder completionFrameBuilder The builder to use for building completion frames. IGameOverFrameBuilder gameOverFrameBuilder The builder to use for building game over frames. IAboutFrameBuilder aboutFrameBuilder The builder to use for building about frames. ITransitionFrameBuilder transitionFrameBuilder The builder to use for building transition frames. IConversationFrameBuilder conversationFrameBuilder The builder to use for building conversation frames. Properties | Edit this page View Source AboutFrameBuilder Get the builder to use for about frames. Declaration public IAboutFrameBuilder AboutFrameBuilder { get; } Property Value Type Description IAboutFrameBuilder | Edit this page View Source CompletionFrameBuilder Get the builder to use for completion frames. Declaration public ICompletionFrameBuilder CompletionFrameBuilder { get; } Property Value Type Description ICompletionFrameBuilder | Edit this page View Source ConversationFrameBuilder Get the builder to use for conversation frames. Declaration public IConversationFrameBuilder ConversationFrameBuilder { get; } Property Value Type Description IConversationFrameBuilder | Edit this page View Source GameOverFrameBuilder Get the builder to use for game over frames. Declaration public IGameOverFrameBuilder GameOverFrameBuilder { get; } Property Value Type Description IGameOverFrameBuilder | Edit this page View Source HelpFrameBuilder Get the builder to use for help frames. Declaration public IHelpFrameBuilder HelpFrameBuilder { get; } Property Value Type Description IHelpFrameBuilder | Edit this page View Source RegionMapFrameBuilder Get the builder to use for region map frames. Declaration public IRegionMapFrameBuilder RegionMapFrameBuilder { get; } Property Value Type Description IRegionMapFrameBuilder | Edit this page View Source SceneFrameBuilder Get the builder to use for scene frames. Declaration public ISceneFrameBuilder SceneFrameBuilder { get; } Property Value Type Description ISceneFrameBuilder | Edit this page View Source TitleFrameBuilder Get the builder to use for title frames. Declaration public ITitleFrameBuilder TitleFrameBuilder { get; } Property Value Type Description ITitleFrameBuilder | Edit this page View Source TransitionFrameBuilder Get the builder to use for transition frames. Declaration public ITransitionFrameBuilder TransitionFrameBuilder { get; } Property Value Type Description ITransitionFrameBuilder"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.FrameBuilderCollections.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.FrameBuilderCollections.html",
    "title": "Class FrameBuilderCollections | BP.AdventureFramework",
    "keywords": "Class FrameBuilderCollections Provides a container from frame builder collections. Inheritance object FrameBuilderCollections Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Rendering.FrameBuilders Assembly: BP.AdventureFramework.dll Syntax public static class FrameBuilderCollections Properties | Edit this page View Source Default Get the default frame builder collection. Declaration public static FrameBuilderCollection Default { get; } Property Value Type Description FrameBuilderCollection"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.GridStringBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.GridStringBuilder.html",
    "title": "Class GridStringBuilder | BP.AdventureFramework",
    "keywords": "Class GridStringBuilder Provides a class for building strings as part of a grid. Inheritance object GridStringBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Rendering.FrameBuilders Assembly: BP.AdventureFramework.dll Syntax public class GridStringBuilder Constructors | Edit this page View Source GridStringBuilder(char, char, char) Initializes a new instance of the GridStringBuilder class. Declaration public GridStringBuilder(char leftBoundaryCharacter = '|', char rightBoundaryCharacter = '|', char horizontalDividerCharacter = '-') Parameters Type Name Description char leftBoundaryCharacter The character to use for left boundaries. char rightBoundaryCharacter The character to use for right boundaries. char horizontalDividerCharacter The character to use for horizontal dividers. Properties | Edit this page View Source DisplaySize Get the display size. Declaration public Size DisplaySize { get; } Property Value Type Description Size | Edit this page View Source HorizontalDividerCharacter Get or set the character used for horizontal dividers. Declaration public char HorizontalDividerCharacter { get; set; } Property Value Type Description char | Edit this page View Source LeftBoundaryCharacter Get or set the character used for left boundary. Declaration public char LeftBoundaryCharacter { get; set; } Property Value Type Description char | Edit this page View Source LineTerminator Get or set the line terminator. Declaration public string LineTerminator { get; set; } Property Value Type Description string | Edit this page View Source RightBoundaryCharacter Get or set the character used for right boundary. Declaration public char RightBoundaryCharacter { get; set; } Property Value Type Description char Methods | Edit this page View Source DrawBoundary(AnsiColor) Draw the boundary. Declaration public void DrawBoundary(AnsiColor color) Parameters Type Name Description AnsiColor color The color to draw the boundary. | Edit this page View Source DrawCentralisedWrapped(string, int, int, AnsiColor, out int, out int) Draw a wrapped string. Declaration public void DrawCentralisedWrapped(string value, int startY, int maxWidth, AnsiColor color, out int endX, out int endY) Parameters Type Name Description string value The string. int startY The start y position. int maxWidth The max width of the string. AnsiColor color The color to draw the text. int endX The end x position. int endY The end y position. | Edit this page View Source DrawHorizontalDivider(int, AnsiColor) Draw a horizontal divider. Declaration public void DrawHorizontalDivider(int y, AnsiColor color) Parameters Type Name Description int y The y position of the divider. AnsiColor color The color to draw the boundary. | Edit this page View Source DrawUnderline(int, int, int, AnsiColor) Draw an underline. Declaration public void DrawUnderline(int x, int y, int length, AnsiColor color) Parameters Type Name Description int x The position of the underline, in x. int y The position of the underline, in y. int length The length of the underline. AnsiColor color The color of the underline. | Edit this page View Source DrawWrapped(string, int, int, int, AnsiColor, out int, out int) Draw a wrapped string. Declaration public void DrawWrapped(string value, int startX, int startY, int maxWidth, AnsiColor color, out int endX, out int endY) Parameters Type Name Description string value The string. int startX The start x position. int startY The start y position. int maxWidth The max width of the string. AnsiColor color The color to draw the text. int endX The end x position. int endY The end y position. | Edit this page View Source Flush() Flush the buffer. Declaration public void Flush() | Edit this page View Source GetCellColor(int, int) Get a color for a cell. Declaration public AnsiColor GetCellColor(int x, int y) Parameters Type Name Description int x The x position of the cell. int y The y position of the cell. Returns Type Description AnsiColor The cell color. | Edit this page View Source GetCharacter(int, int) Get a character from the buffer. Declaration public char GetCharacter(int x, int y) Parameters Type Name Description int x The x position of the character. int y The y position of the character. Returns Type Description char The character. | Edit this page View Source GetNumberOfLines(string, int, int, int) Get the number of lines a string will take up. Declaration public int GetNumberOfLines(string value, int startX, int startY, int maxWidth) Parameters Type Name Description string value The string. int startX The start x position. int startY The start y position. int maxWidth The max width of the string. Returns Type Description int The number of lines the string will take up. | Edit this page View Source Resize(Size) Resize this builder. Declaration public void Resize(Size displaySize) Parameters Type Name Description Size displaySize The new size. | Edit this page View Source SetCell(int, int, char, AnsiColor) Set a cell. Declaration public void SetCell(int x, int y, char character, AnsiColor color) Parameters Type Name Description int x The x position of the cell. int y The y position of the cell. char character The character. AnsiColor color The color of the character."
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.IAboutFrameBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.IAboutFrameBuilder.html",
    "title": "Interface IAboutFrameBuilder | BP.AdventureFramework",
    "keywords": "Interface IAboutFrameBuilder Represents any object that can build about frames. Namespace: BP.AdventureFramework.Rendering.FrameBuilders Assembly: BP.AdventureFramework.dll Syntax public interface IAboutFrameBuilder Methods | Edit this page View Source Build(string, Game, int, int) Build a frame. Declaration IFrame Build(string title, Game game, int width, int height) Parameters Type Name Description string title The title. Game game The game. int width The width of the frame. int height The height of the frame. Returns Type Description IFrame"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.ICompletionFrameBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.ICompletionFrameBuilder.html",
    "title": "Interface ICompletionFrameBuilder | BP.AdventureFramework",
    "keywords": "Interface ICompletionFrameBuilder Represents any object that can build completion frames. Namespace: BP.AdventureFramework.Rendering.FrameBuilders Assembly: BP.AdventureFramework.dll Syntax public interface ICompletionFrameBuilder Methods | Edit this page View Source Build(string, string, int, int) Build a frame. Declaration IFrame Build(string message, string reason, int width, int height) Parameters Type Name Description string message The message to display to the user. string reason The reason the game ended. int width The width of the frame. int height The height of the frame. Returns Type Description IFrame"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.IConversationFrameBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.IConversationFrameBuilder.html",
    "title": "Interface IConversationFrameBuilder | BP.AdventureFramework",
    "keywords": "Interface IConversationFrameBuilder Represents any object that can build conversation frames. Namespace: BP.AdventureFramework.Rendering.FrameBuilders Assembly: BP.AdventureFramework.dll Syntax public interface IConversationFrameBuilder Methods | Edit this page View Source Build(string, IConverser, CommandHelp[], int, int) Build a frame. Declaration IFrame Build(string title, IConverser converser, CommandHelp[] contextualCommands, int width, int height) Parameters Type Name Description string title The title to display to the user. IConverser converser The converser. CommandHelp[] contextualCommands The contextual commands to display. int width The width of the frame. int height The height of the frame. Returns Type Description IFrame"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.IGameOverFrameBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.IGameOverFrameBuilder.html",
    "title": "Interface IGameOverFrameBuilder | BP.AdventureFramework",
    "keywords": "Interface IGameOverFrameBuilder Represents any object that can build game over frames. Namespace: BP.AdventureFramework.Rendering.FrameBuilders Assembly: BP.AdventureFramework.dll Syntax public interface IGameOverFrameBuilder Methods | Edit this page View Source Build(string, string, int, int) Build a frame. Declaration IFrame Build(string message, string reason, int width, int height) Parameters Type Name Description string message The message to display to the user. string reason The reason the game ended. int width The width of the frame. int height The height of the frame. Returns Type Description IFrame"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.IHelpFrameBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.IHelpFrameBuilder.html",
    "title": "Interface IHelpFrameBuilder | BP.AdventureFramework",
    "keywords": "Interface IHelpFrameBuilder Represents any object that can build help frames. Namespace: BP.AdventureFramework.Rendering.FrameBuilders Assembly: BP.AdventureFramework.dll Syntax public interface IHelpFrameBuilder Methods | Edit this page View Source Build(string, string, CommandHelp[], int, int) Build a frame. Declaration IFrame Build(string title, string description, CommandHelp[] commandHelp, int width, int height) Parameters Type Name Description string title The title. string description The description. CommandHelp[] commandHelp The command help. int width The width of the frame. int height The height of the frame. Returns Type Description IFrame"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.IRegionMapBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.IRegionMapBuilder.html",
    "title": "Interface IRegionMapBuilder | BP.AdventureFramework",
    "keywords": "Interface IRegionMapBuilder Represents any object that can build region maps. Namespace: BP.AdventureFramework.Rendering.FrameBuilders Assembly: BP.AdventureFramework.dll Syntax public interface IRegionMapBuilder Methods | Edit this page View Source BuildRegionMap(GridStringBuilder, Region, int, int, int, int) Build a map of a region. Declaration void BuildRegionMap(GridStringBuilder gridStringBuilder, Region region, int x, int y, int maxWidth, int maxHeight) Parameters Type Name Description GridStringBuilder gridStringBuilder The string builder to use. Region region The region. int x The x position to start building at. int y The y position to start building at. int maxWidth The maximum horizontal space available in which to build the map. int maxHeight The maximum vertical space available in which to build the map."
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.IRegionMapFrameBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.IRegionMapFrameBuilder.html",
    "title": "Interface IRegionMapFrameBuilder | BP.AdventureFramework",
    "keywords": "Interface IRegionMapFrameBuilder Represents any object that can build region map frames. Namespace: BP.AdventureFramework.Rendering.FrameBuilders Assembly: BP.AdventureFramework.dll Syntax public interface IRegionMapFrameBuilder Methods | Edit this page View Source Build(Region, int, int) Build a frame. Declaration IFrame Build(Region region, int width, int height) Parameters Type Name Description Region region The region. int width The width of the frame. int height The height of the frame. Returns Type Description IFrame"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.IRoomMapBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.IRoomMapBuilder.html",
    "title": "Interface IRoomMapBuilder | BP.AdventureFramework",
    "keywords": "Interface IRoomMapBuilder Represents any object that can build room maps. Namespace: BP.AdventureFramework.Rendering.FrameBuilders Assembly: BP.AdventureFramework.dll Syntax public interface IRoomMapBuilder Methods | Edit this page View Source BuildRoomMap(GridStringBuilder, Room, ViewPoint, KeyType, int, int, out int, out int) Build a map for a room. Declaration void BuildRoomMap(GridStringBuilder gridStringBuilder, Room room, ViewPoint viewPoint, KeyType key, int startX, int startY, out int endX, out int endY) Parameters Type Name Description GridStringBuilder gridStringBuilder The string builder to use. Room room The room. ViewPoint viewPoint The viewpoint from the room. KeyType key The key type. int startX The start position, x. int startY The start position, x. int endX The end position, x. int endY The end position, x."
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.ISceneFrameBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.ISceneFrameBuilder.html",
    "title": "Interface ISceneFrameBuilder | BP.AdventureFramework",
    "keywords": "Interface ISceneFrameBuilder Represents any object that can build scene frames. Namespace: BP.AdventureFramework.Rendering.FrameBuilders Assembly: BP.AdventureFramework.dll Syntax public interface ISceneFrameBuilder Methods | Edit this page View Source Build(Room, ViewPoint, PlayableCharacter, string, CommandHelp[], KeyType, int, int) Build a frame. Declaration IFrame Build(Room room, ViewPoint viewPoint, PlayableCharacter player, string message, CommandHelp[] contextualCommands, KeyType keyType, int width, int height) Parameters Type Name Description Room room Specify the Room. ViewPoint viewPoint Specify the viewpoint from the room. PlayableCharacter player Specify the player. string message Any additional message. CommandHelp[] contextualCommands The contextual commands to display. KeyType keyType The type of key to use. int width The width of the frame. int height The height of the frame. Returns Type Description IFrame"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.ITitleFrameBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.ITitleFrameBuilder.html",
    "title": "Interface ITitleFrameBuilder | BP.AdventureFramework",
    "keywords": "Interface ITitleFrameBuilder Represents any object that can build title frames. Namespace: BP.AdventureFramework.Rendering.FrameBuilders Assembly: BP.AdventureFramework.dll Syntax public interface ITitleFrameBuilder Methods | Edit this page View Source Build(string, string, int, int) Build a frame. Declaration IFrame Build(string title, string description, int width, int height) Parameters Type Name Description string title The title. string description The description. int width The width of the frame. int height The height of the frame. Returns Type Description IFrame"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.ITransitionFrameBuilder.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.ITransitionFrameBuilder.html",
    "title": "Interface ITransitionFrameBuilder | BP.AdventureFramework",
    "keywords": "Interface ITransitionFrameBuilder Represents any object that can build transition frames. Namespace: BP.AdventureFramework.Rendering.FrameBuilders Assembly: BP.AdventureFramework.dll Syntax public interface ITransitionFrameBuilder Methods | Edit this page View Source Build(string, string, int, int) Build a frame. Declaration IFrame Build(string title, string message, int width, int height) Parameters Type Name Description string title The title to display to the user. string message The message to display to the user. int width The width of the frame. int height The height of the frame. Returns Type Description IFrame"
  },
  "api/BP.AdventureFramework.Rendering.FrameBuilders.html": {
    "href": "api/BP.AdventureFramework.Rendering.FrameBuilders.html",
    "title": "Namespace BP.AdventureFramework.Rendering.FrameBuilders | BP.AdventureFramework",
    "keywords": "Namespace BP.AdventureFramework.Rendering.FrameBuilders Classes FrameBuilderCollection Provides a collection of all of the frame builders required to run a game. FrameBuilderCollections Provides a container from frame builder collections. GridStringBuilder Provides a class for building strings as part of a grid. Interfaces IAboutFrameBuilder Represents any object that can build about frames. ICompletionFrameBuilder Represents any object that can build completion frames. IConversationFrameBuilder Represents any object that can build conversation frames. IGameOverFrameBuilder Represents any object that can build game over frames. IHelpFrameBuilder Represents any object that can build help frames. IRegionMapBuilder Represents any object that can build region maps. IRegionMapFrameBuilder Represents any object that can build region map frames. IRoomMapBuilder Represents any object that can build room maps. ISceneFrameBuilder Represents any object that can build scene frames. ITitleFrameBuilder Represents any object that can build title frames. ITransitionFrameBuilder Represents any object that can build transition frames."
  },
  "api/BP.AdventureFramework.Rendering.Frames.GridTextFrame.html": {
    "href": "api/BP.AdventureFramework.Rendering.Frames.GridTextFrame.html",
    "title": "Class GridTextFrame | BP.AdventureFramework",
    "keywords": "Class GridTextFrame Provides a grid based frame for displaying a command based interface. Inheritance object GridTextFrame Implements IFrame Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: BP.AdventureFramework.Rendering.Frames Assembly: BP.AdventureFramework.dll Syntax public sealed class GridTextFrame : IFrame Constructors | Edit this page View Source GridTextFrame(GridStringBuilder, int, int, AnsiColor) Initializes a new instance of the GridTextFrame class. Declaration public GridTextFrame(GridStringBuilder builder, int cursorLeft, int cursorTop, AnsiColor backgroundColor) Parameters Type Name Description GridStringBuilder builder The builder that creates the frame. int cursorLeft The cursor left position. int cursorTop The cursor top position. AnsiColor backgroundColor The background color. Properties | Edit this page View Source AcceptsInput Get or set if this Frame accepts input. Declaration public bool AcceptsInput { get; set; } Property Value Type Description bool | Edit this page View Source BackgroundColor Get the background color. Declaration public AnsiColor BackgroundColor { get; } Property Value Type Description AnsiColor | Edit this page View Source CursorLeft Get the cursor left position. Declaration public int CursorLeft { get; } Property Value Type Description int | Edit this page View Source CursorTop Get the cursor top position. Declaration public int CursorTop { get; } Property Value Type Description int | Edit this page View Source ShowCursor Get or set if the cursor should be shown. Declaration public bool ShowCursor { get; set; } Property Value Type Description bool Methods | Edit this page View Source Render(TextWriter) Render this frame on a writer. Declaration public void Render(TextWriter writer) Parameters Type Name Description TextWriter writer The writer. | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Implements IFrame"
  },
  "api/BP.AdventureFramework.Rendering.Frames.IFrame.html": {
    "href": "api/BP.AdventureFramework.Rendering.Frames.IFrame.html",
    "title": "Interface IFrame | BP.AdventureFramework",
    "keywords": "Interface IFrame Represents any object that is a frame that can display a command based interface. Namespace: BP.AdventureFramework.Rendering.Frames Assembly: BP.AdventureFramework.dll Syntax public interface IFrame Properties | Edit this page View Source AcceptsInput Get or set if this Frame accepts input. Declaration bool AcceptsInput { get; set; } Property Value Type Description bool | Edit this page View Source CursorLeft Get the cursor left position. Declaration int CursorLeft { get; } Property Value Type Description int | Edit this page View Source CursorTop Get the cursor top position. Declaration int CursorTop { get; } Property Value Type Description int | Edit this page View Source ShowCursor Get or set if the cursor should be shown. Declaration bool ShowCursor { get; set; } Property Value Type Description bool Methods | Edit this page View Source Render(TextWriter) Render this frame on a writer. Declaration void Render(TextWriter writer) Parameters Type Name Description TextWriter writer The writer."
  },
  "api/BP.AdventureFramework.Rendering.Frames.html": {
    "href": "api/BP.AdventureFramework.Rendering.Frames.html",
    "title": "Namespace BP.AdventureFramework.Rendering.Frames | BP.AdventureFramework",
    "keywords": "Namespace BP.AdventureFramework.Rendering.Frames Classes GridTextFrame Provides a grid based frame for displaying a command based interface. Interfaces IFrame Represents any object that is a frame that can display a command based interface."
  },
  "api/BP.AdventureFramework.Rendering.KeyType.html": {
    "href": "api/BP.AdventureFramework.Rendering.KeyType.html",
    "title": "Enum KeyType | BP.AdventureFramework",
    "keywords": "Enum KeyType Enumeration of key types. Namespace: BP.AdventureFramework.Rendering Assembly: BP.AdventureFramework.dll Syntax public enum KeyType Fields Name Description Dynamic Dynamic key, only show relevant key items. Full Full key. None No key."
  },
  "api/BP.AdventureFramework.Rendering.RegionMapMode.html": {
    "href": "api/BP.AdventureFramework.Rendering.RegionMapMode.html",
    "title": "Enum RegionMapMode | BP.AdventureFramework",
    "keywords": "Enum RegionMapMode Enumeration of region map modes. Namespace: BP.AdventureFramework.Rendering Assembly: BP.AdventureFramework.dll Syntax public enum RegionMapMode Fields Name Description Detailed Shows rooms at a detailed level. Dynamic Dynamic region map - uses detailed if there is room, else map will be undetailed. Undetailed Shows rooms as one character, which allows larger maps to be displayed in a limited area."
  },
  "api/BP.AdventureFramework.Rendering.html": {
    "href": "api/BP.AdventureFramework.Rendering.html",
    "title": "Namespace BP.AdventureFramework.Rendering | BP.AdventureFramework",
    "keywords": "Namespace BP.AdventureFramework.Rendering Enums KeyType Enumeration of key types. RegionMapMode Enumeration of region map modes."
  },
  "api/BP.AdventureFramework.Utilities.IAssetTemplate-1.html": {
    "href": "api/BP.AdventureFramework.Utilities.IAssetTemplate-1.html",
    "title": "Interface IAssetTemplate<T> | BP.AdventureFramework",
    "keywords": "Interface IAssetTemplate<T> Represents any object that is a template for an asset. Namespace: BP.AdventureFramework.Utilities Assembly: BP.AdventureFramework.dll Syntax public interface IAssetTemplate<out T> Type Parameters Name Description T The type of asset being templated. Methods | Edit this page View Source Instantiate() Instantiate a new instance of the templated asset. Declaration T Instantiate() Returns Type Description T The asset."
  },
  "api/BP.AdventureFramework.Utilities.OverworldMaker.html": {
    "href": "api/BP.AdventureFramework.Utilities.OverworldMaker.html",
    "title": "Class OverworldMaker | BP.AdventureFramework",
    "keywords": "Class OverworldMaker Provides a class for helping to make Regions. Inheritance object OverworldMaker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Utilities Assembly: BP.AdventureFramework.dll Syntax public sealed class OverworldMaker Constructors | Edit this page View Source OverworldMaker(Identifier, Description, params RegionMaker[]) Initializes a new instance of the OverworldMaker class. Declaration public OverworldMaker(Identifier identifier, Description description, params RegionMaker[] regionMakers) Parameters Type Name Description Identifier identifier An identifier for the region. Description description A description for the region. RegionMaker[] regionMakers The region makes to use to construct regions. | Edit this page View Source OverworldMaker(string, string, params RegionMaker[]) Initializes a new instance of the OverworldMaker class. Declaration public OverworldMaker(string identifier, string description, params RegionMaker[] regionMakers) Parameters Type Name Description string identifier An identifier for the region. string description A description for the region. RegionMaker[] regionMakers The region makes to use to construct regions. Methods | Edit this page View Source Make() Make an overworld. Declaration public Overworld Make() Returns Type Description Overworld The created overworld."
  },
  "api/BP.AdventureFramework.Utilities.RegionMaker.html": {
    "href": "api/BP.AdventureFramework.Utilities.RegionMaker.html",
    "title": "Class RegionMaker | BP.AdventureFramework",
    "keywords": "Class RegionMaker Provides a class for helping to make Regions. Inheritance object RegionMaker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: BP.AdventureFramework.Utilities Assembly: BP.AdventureFramework.dll Syntax public sealed class RegionMaker Constructors | Edit this page View Source RegionMaker(Identifier, Description) Initializes a new instance of the RegionMaker class. Declaration public RegionMaker(Identifier identifier, Description description) Parameters Type Name Description Identifier identifier An identifier for the region. Description description A description for the region. | Edit this page View Source RegionMaker(string, string) Initializes a new instance of the RegionMaker class. Declaration public RegionMaker(string identifier, string description) Parameters Type Name Description string identifier An identifier for the region. string description A description for the region. Properties | Edit this page View Source this[int, int, int] Get or set the room at a location. Declaration public Room this[int x, int y, int z] { get; set; } Parameters Type Name Description int x The x position. int y The y position. int z The z position. Property Value Type Description Room The room. Methods | Edit this page View Source CanPlaceRoom(int, int, int) Determine if a room can be placed at a location Declaration public bool CanPlaceRoom(int x, int y, int z) Parameters Type Name Description int x The X position. int y The Y position. int z The Z position. Returns Type Description bool True if the room can be placed, else false. | Edit this page View Source GetRoomPositions() Get all current room positions. Declaration public RoomPosition[] GetRoomPositions() Returns Type Description RoomPosition[] The room positions. | Edit this page View Source Make() Make a region. Declaration public Region Make() Returns Type Description Region The created region. | Edit this page View Source Make(RoomPosition) Make a region. Declaration public Region Make(RoomPosition startPosition) Parameters Type Name Description RoomPosition startPosition The start position. Returns Type Description Region The created region. | Edit this page View Source Make(int, int, int) Make a region. Declaration public Region Make(int x, int y, int z) Parameters Type Name Description int x The start x position. int y The start y position. int z The start z position. Returns Type Description Region The created region."
  },
  "api/BP.AdventureFramework.Utilities.html": {
    "href": "api/BP.AdventureFramework.Utilities.html",
    "title": "Namespace BP.AdventureFramework.Utilities | BP.AdventureFramework",
    "keywords": "Namespace BP.AdventureFramework.Utilities Classes OverworldMaker Provides a class for helping to make Regions. RegionMaker Provides a class for helping to make Regions. Interfaces IAssetTemplate<T> Represents any object that is a template for an asset."
  },
  "docs/attributes.html": {
    "href": "docs/attributes.html",
    "title": "Attributes | BP.AdventureFramework",
    "keywords": "Attributes Overview All examinable objects can have attributes. Attributes provide a way of adding a lot of depth to games. For example, attributes could be used to buy and sell items, contain a characters XP or HP or even provide a way to add durability to items. Use To add to an existing attribute or to create a new one use the Add method. var player = new PlayableCharacter(\"Player\", string.Empty); player.Attributes.Add(\"$\", 10); To subtract from an existing attribute use the Subtract method. player.Attributes.Subtract(\"$\", 10); Attributes values can be capped. In this example the $ attribute is limited to a range of 0 - 100. Adding or subtracting will not cause the value of the attribute to change outside of this range. var cappedAttribute = new Attribute(\"$\", \"Dollars.\", 0, 100); player.Attributes.Add(cappedAttribute, 50); An example - buying an Item from a NonPlayableCharacter. The following is an example of buying an Item from NonPlayableCharacter. Here a trader has a spade. The player can only buy the spade if they have at least $5. The conversation will jump to the correct paragraph based on if they choose to buy the spade or not. If the player chooses to buy the spade and has enough $ the transaction is made and the spade changes hands. const string currency = \"$\"; var player = new PlayableCharacter(\"Player\", string.Empty); player.Attributes.Add(currency, 10); var trader = new NonPlayableCharacter(\"Trader\", string.Empty); var spade = new Item(\"Spade\", string.Empty); trader.AcquireItem(spade); trader.Conversation = new Conversation( new Paragraph(\"What will you buy?\") { Responses = [ new Response(\"Spade\", new ByCallback(() => player.Attributes.GetValue(currency) >= 5 ? new ToName(\"BoughtSpade\") : new ToName(\"NotEnough\"))), new Response(\"Nothing\", new Last()) ] }, new Paragraph(\"Here it is.\", _ => { player.Attributes.Subtract(currency, 5); trader.Attributes.Add(currency, 5); trader.Give(spade, player); }, new First(), \"BoughtSpade\"), new Paragraph(\"You don't have enough money.\", new First(), \"NotEnough\"), new Paragraph(\"Fine.\") ); This is just one example of using attributes to add depth to a game."
  },
  "docs/commands.html": {
    "href": "docs/commands.html",
    "title": "Commands | BP.AdventureFramework",
    "keywords": "Commands Overview There are three main types of Command. Game Commands are used to interact with the game. Global Commands are used to interact with the program running the game. Custom Commands allow developers to add custom commands to the game without having to worry about extended the games interpreters. Game Commands Drop Allows players to drop an item. R can be used as a shortcut. drop sword The player can also drop all items. drop all Examine Allows players to examine any asset. X can be used as a shortcut. Examine will examine the current room. examine The player themselves can be examined with me or the players name. examine me or examine ben The same is true for Regions, Overworlds, Items and Exits. Take Allows the player to take an Item. T can be used as a shortcut. take sword Take all allows the player to take all takeables Items in the current Room. take all Talk Talk allows the player to start a conversation with a NonPlayableCharacter. L can be used as a shortcut. If only a single NonPlayableCharacter is in the current Room no argument needs to be specified. talk However, if the current Room contains two or more NonPlayableCharacters then to and the NonPlayableCharacters name must be specified. talk to dave Use Use allows the player to use the Items that the player has or that are in the current Room. use sword Items can be used on the Player, the Room, an Exit, a NonPlayableCharacter or another Item. The target must be specified with the on keyword. use sword on me Or use sword on bush Move Regions are traversed with direction commands. North or N moves north. East or E moves east. South or S moves south. West or W moves west. Down or D moves down. Up or U moves up. End Only valid during a conversation with a NonPlayableCharacter, the End command will end the conversation. end Global Commands About Displays a screen containing information about the game. about CommandsOn / CommandsOff Toggles the display of the contextual commands on the screen on and off. commandson Or commandsoff Exit Exit the current game. exit Help Displays a Help screen listing all available commands. help KeyOn / KeyOff Toggles the display of the map key on and off. keyon Or keyoff Map Displays the Region map screen. map New Starts a new game. new Custom Commands Custom commands can be added to many of the assets, including Room, PlayableCharacter, NonPlayableCharacter, Item and Exit."
  },
  "docs/conditional-descriptions.html": {
    "href": "docs/conditional-descriptions.html",
    "title": "Conditional Descriptions | BP.AdventureFramework",
    "keywords": "Conditional Descriptions Overview Normally assets are assigned a Description during the constructor. This is what is returned when the asset is examined. Descriptions are usually specified as a string. var item = new Item(\"The items name\", \"The items description.\"); They can also be specified as a Description. var item = new Item(new Identifier(\"The items name\"), new Description(\"The items description.\")); However, sometimes it may be desirable to have a conditional description that can change based on the state of the asset. Conditional descriptions can be specified with ConditionalDescription and contain a lambda which determines which one of two strings are returned when the asset is examined. // the player, just for demo purposes var player = new PlayableCharacter(\"Ben\", \"A man.\"); // the description to use when the condition is true var trueString = \"A gleaming sword, owned by Ben.\"; // the string to use when the condition is false var falseString = \"A gleaming sword, without an owner.\"; // a lambda that determines which string is returned Condition condition = () => player.FindItem(\"Sword\", out _); // the conditional description itself var conditionalDescription = new ConditionalDescription(trueString, falseString, condition); // create the item with the conditional description var sword = new Item(new Identifier(\"Sword\"), conditionalDescription);"
  },
  "docs/end-conditions.html": {
    "href": "docs/end-conditions.html",
    "title": "End Conditions | BP.AdventureFramework",
    "keywords": "End Conditions Overview The EndCheck class allows the game to determine if it has come to an end. Each game has two end conditions GameOverCondition when the game is over, but has not been won. CompletionCondition when the game is over because it has been won. Use When an EndCheck is invoked it returns an EndCheckResult. The EndCheckResult details the result of the check to see if the game has ended. private static EndCheckResult IsGameOver(Game game) { if (game.Player.IsAlive) return EndCheckResult.NotEnded; return new EndCheckResult(true, \"Game Over\", \"You died!\"); } This method can be used as an EndCheck: EndCheck gameOverCheck = IsGameOver; The GameOverCondition and CompletionCondition are passed in to the game as arguments when a game is created."
  },
  "docs/exit.html": {
    "href": "docs/exit.html",
    "title": "Exit | BP.AdventureFramework",
    "keywords": "Exit Overview An Exit is essentially a connector between to adjoining rooms. Use An Exit can be simply instantiated with a direction. var exit = new Exit(Direction.North); An Exit can be hidden from the player by setting its IsPlayerVisible property to false, this can be set in the constructor. var exit = new Exit(Direction.North, false); Or set explicitly. exit.IsPlayerVisible = false; Optionally, a description of the Exit can be specified. var exit = new Exit(Direction.North, true, new Description(\"A door covered in ivy.\")); This will be returned if the player examines the Exit. Like all Examinable objects, an Exit can be assigned custom commands. exit.Commands = [ new CustomCommand(new CommandHelp(\"Shove\", \"Shove the door.\"), true, (game, args) => { exit.Unlock(); return new Reaction(ReactionResult.OK, \"The door swung open.\"); }) ];"
  },
  "docs/frame-builders.html": {
    "href": "docs/frame-builders.html",
    "title": "Overview | BP.AdventureFramework",
    "keywords": "Overview In BP.AdventureFramework output is handled using the FrameBuilders. A FrameBuilder is essentially a class that builds a Frame that can render a specific state in the game. This Frame can then be rendered on a TextWriter by calling its Render method. Think of the FrameBuilder as the instructions that build the output display and the Frame as the output itself. There are a few types of FrameBuilder, each responsible for rendering a specific game state. SceneFrameBuilder is responsible for building frames that render the scenes in a game. TitleFrameBuilder is responsible for building the title screen frame. RegionMapFrameBuilder is responsible for building a frame that displays a map of a Region. TransitionFrameBuilder is responsible for building frames that display transitions. AboutFrameBuilder is responsible for building a frame to display the about information. HelpFrameBuilder is responsible for building frames to display the help. GameOverFrameBuilder is responsible for building a frame to display the game over screen. CompletionFrameBuilder is responsible for building a frame to display the completion screen. ConversationFrameBuilder is responsible for building a frame that can render a conversation. A game accepts a FrameBuilderCollection. A FrameBuilderCollection is a collection of all the different FrameBuilders required to render a game. All FrameBuilders are extensible, so the output for all parts of the game can be fully customised."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | BP.AdventureFramework",
    "keywords": "Getting Started Adding the NuGet package to your project You need to pull BP.AdventureFramework into your project. The easiest way to do this is to add the NuGet package. The latest package and installation instructions are available here. First Game Once the package has been installed it's time to jump in and start building your first game. Setup To start with create a new Console application. Regardless of target framework, it should look something like this: namespace BP.AdventureFramework.GettingStarted { internal class Program { private static void Main(string[] args) { } } } Adding a PlayableCharacter Every game requires a character to play as, lets add that next: private static PlayableCharacter CreatePlayer() { return new PlayableCharacter(\"Dave\", \"A young boy on a quest to find the meaning of life.\"); } In this example whenever CreatePlayer is called a new PlayableCharacter will be created. The character is called \"Dave\" and has a description that describes him as \"A young boy on a quest to find the meaning of life.\". Creating the game world The game world consists of a hierarchy of three tiers: Overworld, Region and Room. We will create a simple Region with two Rooms. We can do this directly in the Main function for simplicity. To start with lets make the Rooms: private static void Main(string[] args) { var cavern = new Room(\"Cavern\", \"A dark cavern set in to the base of the mountain.\", new Exit(Direction.North)); var tunnel = new Room(\"Tunnel\", \"A dark tunnel leading inside the mountain.\", new Exit(Direction.South)); } Although the Rooms haven't been added to a Region yet there are exits in place that will allow the player to move between them. Games are boring without Items to interact with, let's add an item to the tunnel: var holyGrail = new Item(\"Holy Grail\", \"A dull golden cup, looks pretty old.\", true); tunnel.AddItem(holyGrail); Looking good, but the Rooms need to be contained within a Region. RegionMaker simplifies this process, but sometimes creating a Region directly may be more appropriate if more control is needed. Here we will use RegionMaker: var regionMaker = new RegionMaker(\"Mountain\", \"An imposing volcano just East of town.\") { [0, 0, 0] = cavern, [0, 1, 0] = tunnel }; This needs more breaking down. The RegionMaker will create a region called \"Mountain\" with a description of \"An imposing volcano just East of town.\". The region will contain two rooms, the cavern and the tunnel. The cavern will be added at position x 0, y 0, z 0. The tunnel will be added at position x 0, y 1, z 0, north of the cavern. The game world is nearly complete, but the Region needs to exist within an Overworld for it to be finished. We will use OverworldMaker to achieve this: var overworldMaker = new OverworldMaker(\"Daves World\", \"An ancient kingdom.\", regionMaker); This will create an Overworld called \"Daves World\" which is described as \"An ancient kingdom\" and contains a single Region. All together the code looks like this: var cavern = new Room(\"Cavern\", \"A dark cavern set in to the base of the mountain.\", new Exit(Direction.North)); var tunnel = new Room(\"Tunnel\", \"A dark tunnel leading inside the mountain.\", new Exit(Direction.South)); var holyGrail = new Item(\"Holy Grail\", \"A dull golden cup, looks pretty old.\", true); tunnel.AddItem(holyGrail); var regionMaker = new RegionMaker(\"Mountain\", \"An imposing volcano just East of town.\") { [0, 0, 0] = cavern, [0, 1, 0] = tunnel }; var overworldMaker = new OverworldMaker(\"Daves World\", \"An ancient kingdom.\", regionMaker); Checking if the game is complete For a game to come to an end it needs to reach either a game over state or a completion state. Firstly lets look at the logic that determines if the game is complete. An EndCheck is required, which returns an EndCheckResult that determines if the game is complete. In this example lets make a method that determines if the game is complete. The game is complete if the player has the holy grail: private static EndCheckResult IsGameComplete(Game game) { if (!game.Player.FindItem(\"Holy Grail\", out _)) return EndCheckResult.NotEnded; return new EndCheckResult(true, \"Game Complete\", \"You have the Holy Grail!\"); } If the player has the holy grail then the EndCheckResult will return that the game has ended, and have a title that will read \"Game Complete\" and a description that reads \"You have the Holy Grail!\". A common game over state may be if the player dies: private static EndCheckResult IsGameOver(Game game) { if (game.Player.IsAlive) return EndCheckResult.NotEnded; return new EndCheckResult(true, \"Game Over\", \"You died!\"); } Creating the game The game now has all the required assets and logic it just needs some boilerplate to tie everything together before it is ready to play. A GameCreationCallback is required to instantiate an instance of a Game. This is so that new instances of the Game can be created as required. var gameCreator = Game.Create( \"The Life Of Dave\", \"Dave awakes to find himself in a cavern...\", \"A very low budget adventure.\", x => overworldMaker.Make(), CreatePlayer, IsGameComplete, IsGameOver); This requires some breaking down. The Game class has a Create method that can be used to create instances of Game. This takes the following arguments: Name - the name of the game. Introduction - an introduction to the game. Description - a description of the game. OverworldGenerator - a callback for generating instances of the overworld. PlayerGenerator - a callback for generating instances of the player. CompletionCondition - a callback for determining if the game is complete. GameOverCondition - a callback for determining if the game is over. Executing the game The game is executed simply by calling the static Execute method on Game and passing in the game creation callback. Game.Execute(gameCreator); Bringing it all together The full example code should look like this: using BP.AdventureFramework.Assets; using BP.AdventureFramework.Assets.Characters; using BP.AdventureFramework.Assets.Locations; using BP.AdventureFramework.Logic; using BP.AdventureFramework.Utilities; namespace BP.AdventureFramework.GettingStarted { internal class Program { private static EndCheckResult IsGameComplete(Game game) { if (!game.Player.FindItem(\"Holy Grail\", out _)) return EndCheckResult.NotEnded; return new EndCheckResult(true, \"Game Complete\", \"You have the Holy Grail!\"); } private static EndCheckResult IsGameOver(Game game) { if (game.Player.IsAlive) return EndCheckResult.NotEnded; return new EndCheckResult(true, \"Game Over\", \"You died!\"); } private static PlayableCharacter CreatePlayer() { return new PlayableCharacter(\"Dave\", \"A young boy on a quest to find the meaning of life.\"); } private static void Main(string[] args) { var cavern = new Room(\"Cavern\", \"A dark cavern set in to the base of the mountain.\", new Exit(Direction.North)); var tunnel = new Room(\"Tunnel\", \"A dark tunnel leading inside the mountain.\", new Exit(Direction.South)); var holyGrail = new Item(\"Holy Grail\", \"A dull golden cup, looks pretty old.\", true); tunnel.AddItem(holyGrail); var regionMaker = new RegionMaker(\"Mountain\", \"An imposing volcano just East of town.\") { [0, 0, 0] = cavern, [0, 1, 0] = tunnel }; var overworldMaker = new OverworldMaker(\"Daves World\", \"An ancient kingdom.\", regionMaker); var gameCreator = Game.Create( \"The Life Of Dave\", \"Dave awakes to find himself in a cavern...\", \"A very low budget adventure.\", x => overworldMaker.Make(), CreatePlayer, IsGameComplete, IsGameOver); Game.Execute(gameCreator); } } } Simply build and run the application and congratulations, you have a working BP.AdventureFramework game!"
  },
  "docs/items.html": {
    "href": "docs/items.html",
    "title": "Item | BP.AdventureFramework",
    "keywords": "Item Overview Items can be used to add interactivity with a game. Items can be something that a player can take with them, or they may be static in a Room. Use An Item can be simply instantiated with a name and description. var sword = new Item(\"Sword\", \"A heroes sword.\"); By default, an Item is not takeable and is tied to a Room. If it is takeable this can be specified in the constructor. var sword = new Item(\"Sword\", \"A heroes sword.\", true); An Item can morph in to another Item. This is useful in situations where the Item changes state. Morphing is invoked with the Morph method. The Item that Morph is invoked on takes on the properties of the Item being morphed into. var brokenSword = new Item(\"Broken Sword\", \"A broken sword\"); sword.Morph(brokenSword); Like all Examinable objects, an Item can be assigned custom commands. bomb.Commands = [ new CustomCommand(new CommandHelp(\"Cut wire\", \"Cut the red wire.\"), true, (game, args) => { game.Player.Kill(); return new Reaction(ReactionResult.Fatal, \"Boom!\"); }) ]; Interaction Interactions can be set up between different assets in the game. The InteractionResult contains the result of the interaction, and allows the game to react to the interaction. var dartsBoard = new Item(\"Darts board\", \"A darts board.\"); var dart = new Item(\"Dart\", \"A dart\") { Interaction = item => { if (item == dartsBoard) return new InteractionResult(InteractionEffect.SelfContained, item, \"The dart stuck in the darts board.\"); return new InteractionResult(InteractionEffect.NoEffect, item); } };"
  },
  "docs/non-playable-character.html": {
    "href": "docs/non-playable-character.html",
    "title": "NonPlayableCharacter | BP.AdventureFramework",
    "keywords": "NonPlayableCharacter Overview A NonPlayableCharacter represents any character that the player may meet throughout the game. Use A NonPlayableCharacter can be simply instantiated with a name and description. var goblin = new NonPlayableCharacter(\"Goblin\", \"A vile goblin.\"); A NonPlayableCharacter can give an item to another NonPlayableCharacter. var daisy = new Item(\"Daisy\", \"A beautiful daisy that is sure to cheer up even the most miserable creature.\"); npc.Give(daisy, goblin); NonPlayableCharacters can contain custom commands that allow the user to directly interact with the character or other assets. goblin.Commands = [ new CustomCommand(new CommandHelp(\"Smile\", \"Crack a smile.\"), true, (game, args) => { return new Reaction(ReactionResult.OK, \"Well that felt weird.\"); }) ]; Conversations A NonPlayableCharacter can hold a conversation with the player. A Conversation contains Paragraphs. A Paragraph can contain one or more Responses. A Response can contain a delta or other implementation of IEndOfPargraphInstruction to shift the conversation by, which will cause the conversation to jump paragraphs by the specified value. A Response can also contain a callback to perform some action when the player selects that option. goblin.Conversation = new Conversation( new Paragraph(\"This is a the first line.\"), new Paragraph(\"This is a question.\") { Responses = [ new Response(\"This is the first response.\", new Jump(1)), new Response(\"This is the second response.\", new Jump(2)), new Response(\"This is the third response.\", new Jump(3)) ] }, new Paragraph(\"You picked first response, return to start of conversation.\", new GoTo(1)), new Paragraph(\"You picked second response, return to start of conversation.\", new GoTo(1)), new Paragraph(\"You picked third response, you are dead.\", game => game.Player.Kill()) );"
  },
  "docs/overworld.html": {
    "href": "docs/overworld.html",
    "title": "Overworld | BP.AdventureFramework",
    "keywords": "Overworld Overview An Overworld is the top level location in a game. A game can only contain a single Overworld. An Overworld can contain multiple Regions. Overworld ├── Region │ ├── Room │ ├── Room │ ├── Room ├── Region │ ├── Room │ ├── Room Use An Overworld can be simply instantiated with a name and description. var overworld = new Overworld(\"Name\", \"Description.\"); Regions can be added to the Overworld with the AddRegion method. overworld.AddRegion(region); Regions can be removed from an Overworld with the RemoveRegion method. overworld.RemoveRegion(region); The Overworld can be traversed with the Move method. overworld.Move(region); OverworldMaker The OverworldMaker simplifies the creation of the Overworld, when used in conjunction with RegionMakers. var overworldMaker = new OverworldMaker(\"Name\", \"Description.\", regionMakers); However, the main benefit of using an OverworldMaker is that it allows multiple instances of an Overworld to be created from a single definition of an Overworld. var overworld = overworldMaker.Make();"
  },
  "docs/playable-character.html": {
    "href": "docs/playable-character.html",
    "title": "PlayableCharacter | BP.AdventureFramework",
    "keywords": "PlayableCharacter Overview A PlayableCharacter represents the character that the player plays as throughout the game. Each game has only a single PlayableCharacter. Use A PlayableCharacter can be simply instantiated with a name and description. var player = new PlayableCharacter(\"Ben\", \"A 39 year old man.\"); A PlayableCharacter can be also be instantiated with a list of Items. var player = new PlayableCharacter(\"Ben\", \"A 39 year old man.\", [ new Item(\"Guitar\", \"A PRS Custom 22, in whale blue, of course.\"), new Item(\"Wallet\", \"An empty wallet, of course.\") ]); A PlayableCharacter can be given items with the AcquireItem method. player.AcquireItem(new Item(\"Mallet\", \"A large mallet.\")); A PlayableCharacter can lose an item with the DequireItem method. player.DequireItem(mallet); A PlayableCharacter can use an item on another asset: var trapDoor = new Exit(Direction.Down); var mallet = new Item(\"Mallet\", \"A large mallet.\"); player.UseItem(mallet, trapDoor); A PlayableCharacter can give an item to a non-playable character. var goblin = new NonPlayableCharacter(\"Goblin\", \"A vile goblin.\"); var daisy = new Item(\"Daisy\", \"A beautiful daisy that is sure to cheer up even the most miserable creature.\"); player.Give(daisy, goblin); PlayableCharacters can contain custom commands that allow the user to directly interact with the character or other assets. player.Commands = [ new CustomCommand(new CommandHelp(\"Punch wall\", \"Punch the wall.\"), true, (game, args) => { return new Reaction(ReactionResult.OK, \"You punched the wall.\"); }) ];"
  },
  "docs/region.html": {
    "href": "docs/region.html",
    "title": "Region | BP.AdventureFramework",
    "keywords": "Region Overview A Region is the intermediate level location in a game. An Overworld can contain multiple Regions. A Region can contain multiple Rooms. Overworld ├── Region │ ├── Room │ ├── Room │ ├── Room ├── Region │ ├── Room │ ├── Room A Region represents a 3D space. The x location always refers to the horizontal axis, with lower values being west and higher values being east. The y location always refers to the vertical axis, with lower values being south and higher values being north. The z location always refers to the depth axis, with lower values being down and higher values being up. Use A Region can be simply instantiated with a name and description. var region = new Region(\"Name\", \"Description.\"); Rooms can be added to the Region with the AddRoom method. The x, y and z location within the Region must be specified. region.AddRoom(room, 0, 0, 0); Rooms can be removed from a Region with the RemoveRoom method. region.RemoveRoom(room); The Region can be traversed with the Move method. region.Move(Direction.North); The start position, that is the position that the Player will start in when entering a Region, can be specified with SetStartPosition. region.SetStartPosition(0, 0, 0); The UnlockDoorPair method can be used to unlock an Exit in the current Room, which will also unlock the corresponding Exit in the adjoining Room. region.UnlockDoorPair(Direction.East); Like all Examinable objects, Regions can be assigned custom commands. region.Commands = [ new CustomCommand(new CommandHelp(\"Warp\", \"Warp to the start.\"), true, (game, args) => { region.JumpToRoom(0, 0, 0); return new Reaction(ReactionResult.OK, \"You warped to the start.\"); }) ]; RegionMaker The RegionMaker simplifies the creation of a Region. Rooms are added to the Region with a specified x, y and z position within the Region. var regionMaker = new RegionMaker(\"Region\", \"Description.\") { [0, 0, 0] = new Room(\"Room 1\", \"Description of room 1.\"), [1, 0, 0] = new Room(\"Room 2\", \"Description of room 2.\"), }; The main benefit of using a RegionMaker is that it allows multiple instances of a Region to be created from a single definition of a Region. var region = regionMaker.Make();"
  },
  "docs/room.html": {
    "href": "docs/room.html",
    "title": "Room | BP.AdventureFramework",
    "keywords": "Room Overview A Room is the lowest level location in a game. A Region can contain multiple Rooms. Overworld ├── Region │ ├── Room │ ├── Room │ ├── Room ├── Region │ ├── Room │ ├── Room A Room can contain up to six Exits, one for each of the directions north, east, south, west, up and down. Use A Region can be simply instantiated with a name and description. var room = new Room(\"Name\", \"Description.\"); Exits can be added to the Room with the AddExit method. room.AddExit(new Exit(Direction.East)); Exits can be removed from a Room with the RemoveExit method. region.RemoveExit(exit); Items can be added to the Room with the AddItem method. room.AddItem(new Item(\"Name\", \"Description.\")); Items can be removed from a Room with the RemoveItem method. region.RemoveItem(item); Characters can be added to the Room with the AddCharacter method. room.AddCharacter(new NonPlayableCharacter(\"Name\", \"Description.\")); Characters can be removed from a Room with the RemoveCharacter method. region.RemoveCharacter(character); Rooms can contain custom commands that allow the user to directly interact with the Room. room.Commands = [ new CustomCommand(new CommandHelp(\"Pull lever\", \"Pull the lever.\"), true, (game, args) => { room.FindExit(Direction.East, true, out var exit); exit.Unlock(); return new Reaction(ReactionResult.OK, \"The exit was unlocked.\"); }) ];"
  },
  "index.html": {
    "href": "index.html",
    "title": "BP.AdventureFramework | BP.AdventureFramework",
    "keywords": "BP.AdventureFramework BP.AdventureFramework is a C# library that provides a framework for building text adventures and interactive stories in .NET. The repo is open source and is available at https://github.com/benpollarduk/BP.AdventureFramework. BP.AdventureFramework has a sister Kotlin implementation, Ktaf, which is available at https://github.com/benpollarduk/ktaf. This documentation site is a work in progress, if there are any topics that aren't covered that you would like to see included, or if you spot any mistakes please report them on the Issues page on GitHub."
  }
}